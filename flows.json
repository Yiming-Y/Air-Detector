[
    {
        "id": "842a49df1ddff959",
        "type": "tab",
        "label": "流程 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9cbdca5a7308a56b",
        "type": "junction",
        "z": "842a49df1ddff959",
        "x": 320,
        "y": 280,
        "wires": [
            [
                "26cf6d983590bc76"
            ]
        ]
    },
    {
        "id": "26cf6d983590bc76",
        "type": "junction",
        "z": "842a49df1ddff959",
        "x": 1000,
        "y": 280,
        "wires": [
            [
                "80060f8163d86963"
            ]
        ]
    },
    {
        "id": "8f73164737c67277",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "74f147a7b6f76b2e",
        "type": "mqtt-broker",
        "name": "test",
        "broker": "110.40.167.13",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "5",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "68971ee8902a712e",
        "type": "ui_group",
        "name": "Real time data",
        "tab": "7c5419ca58ee9c18",
        "order": 1,
        "disp": true,
        "width": "26",
        "collapse": false,
        "className": ""
    },
    {
        "id": "7c5419ca58ee9c18",
        "type": "ui_tab",
        "name": "Real time data",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "d645c3c23d3db10a",
        "type": "ui_group",
        "name": "Data comparison",
        "tab": "3bd06052f5d8e58c",
        "order": 1,
        "disp": true,
        "width": "24",
        "collapse": false,
        "className": ""
    },
    {
        "id": "5be5dabc59d1197b",
        "type": "remote-config",
        "name": "Node-RED UI",
        "host": "localhost",
        "protocol": "http",
        "port": "1880",
        "baseurl": "/ui",
        "instancehash": "ii0jsztrkk9z7dkpi4j27vncdlbjht34l2en4gcjtigo4bvpcq2ncksyq417q6nx",
        "server": "nodered03.remote-red.com",
        "region": "us"
    },
    {
        "id": "cf85ad42ef49f2d3",
        "type": "MySQLdatabase",
        "name": "",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "air",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "3bd06052f5d8e58c",
        "type": "ui_tab",
        "name": "Data comparison",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "e0cdd9192bbc2227",
        "type": "ui_tab",
        "name": "Database",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "7bd63622b6be217a",
        "type": "ui_group",
        "name": "Database",
        "tab": "e0cdd9192bbc2227",
        "order": 1,
        "disp": true,
        "width": "14",
        "collapse": false,
        "className": ""
    },
    {
        "id": "955896c376235196",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 2,
        "width": 4,
        "height": 1
    },
    {
        "id": "47d65a37c230a677",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 4,
        "width": 2,
        "height": 1
    },
    {
        "id": "5e09d8a35045359b",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 6,
        "width": 2,
        "height": 1
    },
    {
        "id": "7071a4696c91b2fc",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 8,
        "width": 5,
        "height": 1
    },
    {
        "id": "928db7abcf93b8f7",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 11,
        "width": 3,
        "height": 1
    },
    {
        "id": "306dbfa142846f2c",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 15,
        "width": 5,
        "height": 1
    },
    {
        "id": "aa6c577057b38f97",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 17,
        "width": 3,
        "height": 1
    },
    {
        "id": "b943673a3ba25909",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 18,
        "width": 5,
        "height": 1
    },
    {
        "id": "29a3b4e80ff018d5",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 20,
        "width": 3,
        "height": 1
    },
    {
        "id": "c874bac6279f9db3",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 21,
        "width": 5,
        "height": 1
    },
    {
        "id": "7cbf4f25cc71d60b",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 23,
        "width": 3,
        "height": 1
    },
    {
        "id": "224a46f1461aef79",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 24,
        "width": 5,
        "height": 1
    },
    {
        "id": "d2284cfe2b0dea39",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 26,
        "width": 3,
        "height": 1
    },
    {
        "id": "bf964ff18e4e4247",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 27,
        "width": 5,
        "height": 1
    },
    {
        "id": "7cd73f68b452afe1",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 29,
        "width": 23,
        "height": 1
    },
    {
        "id": "efb308102bfa1364",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 31,
        "width": 4,
        "height": 1
    },
    {
        "id": "33ac9c43a0210a89",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 33,
        "width": 2,
        "height": 1
    },
    {
        "id": "763e4ef5afe21227",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 35,
        "width": 1,
        "height": 1
    },
    {
        "id": "a3298ed5824f0e80",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 37,
        "width": 5,
        "height": 1
    },
    {
        "id": "fb7c2ae0ee3018b5",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 38,
        "width": 6,
        "height": 1
    },
    {
        "id": "fc1dec178c57ec0c",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 42,
        "width": 5,
        "height": 1
    },
    {
        "id": "d8192a4c5024bffe",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 44,
        "width": 2,
        "height": 1
    },
    {
        "id": "52e0bded8ea05691",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 45,
        "width": 5,
        "height": 1
    },
    {
        "id": "ae3920f4a0860fd2",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 47,
        "width": 2,
        "height": 1
    },
    {
        "id": "fdf0d280762143ef",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 48,
        "width": 5,
        "height": 1
    },
    {
        "id": "0ecd59ea4ec67cd7",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 50,
        "width": 3,
        "height": 1
    },
    {
        "id": "a48365122cfec853",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 51,
        "width": 5,
        "height": 1
    },
    {
        "id": "c485fc613d0c2a7a",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 53,
        "width": 3,
        "height": 1
    },
    {
        "id": "cc0b0640e45b135b",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 54,
        "width": 5,
        "height": 1
    },
    {
        "id": "c34dedfeca15c8eb",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 55,
        "width": 26,
        "height": 1
    },
    {
        "id": "84319144f1b3340c",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 56,
        "width": 6,
        "height": 1
    },
    {
        "id": "0b019312beaa3dc3",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 60,
        "width": 5,
        "height": 1
    },
    {
        "id": "25c7fe75b896c35a",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 61,
        "width": 6,
        "height": 1
    },
    {
        "id": "c95d0604af2463d2",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 65,
        "width": 5,
        "height": 1
    },
    {
        "id": "fcf47a336d65b9c7",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 66,
        "width": 6,
        "height": 1
    },
    {
        "id": "b158f7941324ae79",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 67,
        "width": 5,
        "height": 1
    },
    {
        "id": "8bfdfdc195b9bfd6",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 68,
        "width": 6,
        "height": 1
    },
    {
        "id": "eb79db8bd2dd5057",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 69,
        "width": 5,
        "height": 1
    },
    {
        "id": "db5c7e8c5df27a73",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 70,
        "width": 6,
        "height": 1
    },
    {
        "id": "bb6cbdbd9d10b9e1",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 71,
        "width": 5,
        "height": 1
    },
    {
        "id": "f101e062755328e0",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 72,
        "width": 6,
        "height": 1
    },
    {
        "id": "1411de352ee0d6bf",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 73,
        "width": 5,
        "height": 1
    },
    {
        "id": "4ca9fcb38e120bca",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 74,
        "width": 26,
        "height": 1
    },
    {
        "id": "f263bffa01e199c1",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 75,
        "width": 6,
        "height": 1
    },
    {
        "id": "7d2d8f81ecde7cf3",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 77,
        "width": 15,
        "height": 1
    },
    {
        "id": "80e7232dc6c020e9",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 78,
        "width": 6,
        "height": 1
    },
    {
        "id": "782eab35676a08ec",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 80,
        "width": 15,
        "height": 1
    },
    {
        "id": "e68ab86673c41759",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 81,
        "width": 6,
        "height": 1
    },
    {
        "id": "1c48675101960e62",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 82,
        "width": 15,
        "height": 1
    },
    {
        "id": "435b8bc8bc61e5f4",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 83,
        "width": 6,
        "height": 1
    },
    {
        "id": "9440ea00b0559b30",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 84,
        "width": 15,
        "height": 1
    },
    {
        "id": "b52111ab0a8439d5",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 85,
        "width": 6,
        "height": 1
    },
    {
        "id": "e07359f87d62d15f",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 86,
        "width": 15,
        "height": 1
    },
    {
        "id": "5c561f090756f543",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 87,
        "width": 6,
        "height": 1
    },
    {
        "id": "db6df40afa2e8479",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "68971ee8902a712e",
        "order": 88,
        "width": 15,
        "height": 1
    },
    {
        "id": "6b59ae242304b69f",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 2,
        "width": 2,
        "height": 1
    },
    {
        "id": "5bdfb51ad881a6ee",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 4,
        "width": 2,
        "height": 1
    },
    {
        "id": "ebc7ec9a9bc0d5c3",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 5,
        "width": 2,
        "height": 1
    },
    {
        "id": "28072ade4a11bcb0",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 6,
        "width": 2,
        "height": 1
    },
    {
        "id": "8fe7ed5de5fd5f25",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 7,
        "width": 2,
        "height": 1
    },
    {
        "id": "ad5c0d399204c140",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 8,
        "width": 2,
        "height": 1
    },
    {
        "id": "2e4e6bebe17a1932",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 9,
        "width": 2,
        "height": 1
    },
    {
        "id": "2c9aaabacd2af5ed",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 10,
        "width": 2,
        "height": 1
    },
    {
        "id": "df788c7e9c9635d6",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 11,
        "width": 2,
        "height": 1
    },
    {
        "id": "b50b86e5150ad2f8",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 12,
        "width": 24,
        "height": 1
    },
    {
        "id": "15e2a8b912e2d960",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 14,
        "width": 2,
        "height": 1
    },
    {
        "id": "66717fea429af23a",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 16,
        "width": 2,
        "height": 1
    },
    {
        "id": "6639bb321072f364",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 17,
        "width": 2,
        "height": 1
    },
    {
        "id": "d1227e2913179916",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 18,
        "width": 2,
        "height": 1
    },
    {
        "id": "a4255ebe402a6c0b",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 19,
        "width": 2,
        "height": 1
    },
    {
        "id": "7b6a5530d1e7ad88",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 20,
        "width": 2,
        "height": 1
    },
    {
        "id": "6088d87ea90f698d",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 21,
        "width": 2,
        "height": 1
    },
    {
        "id": "87e153138378c32c",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 22,
        "width": 2,
        "height": 1
    },
    {
        "id": "12ebb5ea326722c5",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 23,
        "width": 2,
        "height": 1
    },
    {
        "id": "900e2b09c9e34432",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 24,
        "width": 24,
        "height": 1
    },
    {
        "id": "5a386e03bb5496dc",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 26,
        "width": 2,
        "height": 1
    },
    {
        "id": "220d2693c688c6de",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 28,
        "width": 2,
        "height": 1
    },
    {
        "id": "675822705cb19d39",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 29,
        "width": 2,
        "height": 1
    },
    {
        "id": "540cb9311b1ec602",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 30,
        "width": 2,
        "height": 1
    },
    {
        "id": "91d37fc73640d934",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 31,
        "width": 2,
        "height": 1
    },
    {
        "id": "6685adea67e8d17e",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 32,
        "width": 2,
        "height": 1
    },
    {
        "id": "7423c02cdf1b8c9e",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 33,
        "width": 2,
        "height": 1
    },
    {
        "id": "79b5743f9257b4fa",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 34,
        "width": 2,
        "height": 1
    },
    {
        "id": "947d176038afbc18",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 35,
        "width": 2,
        "height": 1
    },
    {
        "id": "a7a4e75550ca7ff2",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 36,
        "width": 24,
        "height": 1
    },
    {
        "id": "43608d807c134175",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 38,
        "width": 2,
        "height": 1
    },
    {
        "id": "56391336c73eab60",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 40,
        "width": 2,
        "height": 1
    },
    {
        "id": "aab7b4ad2e7c74fc",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 41,
        "width": 2,
        "height": 1
    },
    {
        "id": "e853998d8cb2459f",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 42,
        "width": 2,
        "height": 1
    },
    {
        "id": "f3462ec4636e1fc2",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 43,
        "width": 2,
        "height": 1
    },
    {
        "id": "ed74f843cea005da",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 44,
        "width": 2,
        "height": 1
    },
    {
        "id": "b454d7feb75c1c5d",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 45,
        "width": 2,
        "height": 1
    },
    {
        "id": "25afbd617c96416b",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 46,
        "width": 2,
        "height": 1
    },
    {
        "id": "17fe8b041662f0a2",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 47,
        "width": 2,
        "height": 1
    },
    {
        "id": "73c5f63eb8ae2e86",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 48,
        "width": 24,
        "height": 1
    },
    {
        "id": "2e0b44ddf8f6753c",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 50,
        "width": 2,
        "height": 1
    },
    {
        "id": "c7accabe61d9cdf5",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 52,
        "width": 2,
        "height": 1
    },
    {
        "id": "95d620262087c159",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 53,
        "width": 2,
        "height": 1
    },
    {
        "id": "52a6055c12bedc81",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 54,
        "width": 2,
        "height": 1
    },
    {
        "id": "0fb4f1daae141912",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 55,
        "width": 2,
        "height": 1
    },
    {
        "id": "469bf792780f2468",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 56,
        "width": 2,
        "height": 1
    },
    {
        "id": "7a6ec111f415672d",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 57,
        "width": 2,
        "height": 1
    },
    {
        "id": "b752b07c3606a462",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 58,
        "width": 2,
        "height": 1
    },
    {
        "id": "0ca7b5e1eab05c7a",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 59,
        "width": 2,
        "height": 1
    },
    {
        "id": "f24fb8d863dd8397",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 60,
        "width": 24,
        "height": 1
    },
    {
        "id": "15dced8a46fda24f",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 62,
        "width": 2,
        "height": 1
    },
    {
        "id": "b095296c4468f58d",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 64,
        "width": 2,
        "height": 1
    },
    {
        "id": "eb24dc1c9f75c647",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 65,
        "width": 2,
        "height": 1
    },
    {
        "id": "3b6b29daaeaafc3f",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 66,
        "width": 2,
        "height": 1
    },
    {
        "id": "29bb096aa59b5de8",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 67,
        "width": 24,
        "height": 1
    },
    {
        "id": "5bc3b3106a8c76a4",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 69,
        "width": 2,
        "height": 1
    },
    {
        "id": "da8419ab970bd9a9",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 71,
        "width": 2,
        "height": 1
    },
    {
        "id": "660eada9aace49a2",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 72,
        "width": 2,
        "height": 1
    },
    {
        "id": "64884ed6ba0c4d07",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "d645c3c23d3db10a",
        "order": 73,
        "width": 2,
        "height": 1
    },
    {
        "id": "c201cb2c207094f4",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 1,
        "width": 5,
        "height": 1
    },
    {
        "id": "ae3f680bf4ce8f50",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 3,
        "width": 5,
        "height": 1
    },
    {
        "id": "9f8baafc2635f09f",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 4,
        "width": 4,
        "height": 1
    },
    {
        "id": "4d8b117a05232ef9",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 6,
        "width": 4,
        "height": 1
    },
    {
        "id": "0e4bc0320d425895",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 8,
        "width": 5,
        "height": 1
    },
    {
        "id": "0029a00263e4e4ea",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 10,
        "width": 5,
        "height": 1
    },
    {
        "id": "adc127ddb6b8c04b",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 11,
        "width": 4,
        "height": 1
    },
    {
        "id": "0d13ea54cff1b575",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 13,
        "width": 4,
        "height": 1
    },
    {
        "id": "b68f188c6133ef63",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 15,
        "width": 5,
        "height": 1
    },
    {
        "id": "2e83c320f15b2970",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 17,
        "width": 5,
        "height": 1
    },
    {
        "id": "5cd86e3d89c7bab5",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 18,
        "width": 4,
        "height": 1
    },
    {
        "id": "06c78fa51d36487a",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 20,
        "width": 4,
        "height": 1
    },
    {
        "id": "a9ba2e0153310865",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 22,
        "width": 5,
        "height": 1
    },
    {
        "id": "939a862ddcaf5797",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 24,
        "width": 5,
        "height": 1
    },
    {
        "id": "0e0d2624c89d8cde",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 25,
        "width": 3,
        "height": 1
    },
    {
        "id": "e4100df03002d925",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 27,
        "width": 3,
        "height": 1
    },
    {
        "id": "58694a192e867d53",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 29,
        "width": 5,
        "height": 1
    },
    {
        "id": "cc11bd2798cb8030",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 31,
        "width": 5,
        "height": 1
    },
    {
        "id": "dd647a36111bc889",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 32,
        "width": 3,
        "height": 1
    },
    {
        "id": "030a0e421c25ccd1",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 34,
        "width": 3,
        "height": 1
    },
    {
        "id": "49ce5a88189ec786",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 36,
        "width": 5,
        "height": 1
    },
    {
        "id": "6028f554ab5c4a9c",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 38,
        "width": 5,
        "height": 1
    },
    {
        "id": "04feb0a719ab9f0c",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 39,
        "width": 4,
        "height": 1
    },
    {
        "id": "c9f746cf6ce73f8c",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 41,
        "width": 4,
        "height": 1
    },
    {
        "id": "d8d181cdf75c38a2",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 43,
        "width": 5,
        "height": 1
    },
    {
        "id": "b72afaae10547459",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 45,
        "width": 5,
        "height": 1
    },
    {
        "id": "04a030671a45c69a",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 46,
        "width": 4,
        "height": 1
    },
    {
        "id": "56238a9c68728e9b",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 48,
        "width": 4,
        "height": 1
    },
    {
        "id": "6ea249fae4699b0a",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 50,
        "width": 5,
        "height": 1
    },
    {
        "id": "9736a59eee252a89",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 52,
        "width": 5,
        "height": 1
    },
    {
        "id": "a1cc92a943ab68f3",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 53,
        "width": 4,
        "height": 1
    },
    {
        "id": "2ad3f3e0262bdfd7",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 55,
        "width": 4,
        "height": 1
    },
    {
        "id": "e12572aad6e73725",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 57,
        "width": 5,
        "height": 1
    },
    {
        "id": "2cb05eb6624b9b25",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 59,
        "width": 5,
        "height": 1
    },
    {
        "id": "cfa580bdb71fa56b",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 60,
        "width": 4,
        "height": 1
    },
    {
        "id": "1cf9a1fe8b110d19",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 62,
        "width": 4,
        "height": 1
    },
    {
        "id": "e62e3476ab094eec",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 64,
        "width": 5,
        "height": 1
    },
    {
        "id": "a4b57fccdfdf5d73",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 66,
        "width": 5,
        "height": 1
    },
    {
        "id": "a6c7b190f97da03e",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 67,
        "width": 4,
        "height": 1
    },
    {
        "id": "6d1109faf3ef3492",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 69,
        "width": 4,
        "height": 1
    },
    {
        "id": "89bfa292aff680eb",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 71,
        "width": 5,
        "height": 1
    },
    {
        "id": "84c76ff10d21f9e1",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 73,
        "width": 5,
        "height": 1
    },
    {
        "id": "5e36cb811ccba1a9",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 74,
        "width": 4,
        "height": 1
    },
    {
        "id": "1f6dc9950904ddc1",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 76,
        "width": 4,
        "height": 1
    },
    {
        "id": "c5bd68b1401dd12e",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 78,
        "width": 5,
        "height": 1
    },
    {
        "id": "ea6f5a38164d43ca",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 80,
        "width": 5,
        "height": 1
    },
    {
        "id": "846b646f403dc4c0",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 81,
        "width": 4,
        "height": 1
    },
    {
        "id": "62b0e3446b935e8a",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 83,
        "width": 4,
        "height": 1
    },
    {
        "id": "e6a7ff205ff0f52b",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 85,
        "width": 5,
        "height": 1
    },
    {
        "id": "2f51bc64b80d72a9",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 87,
        "width": 5,
        "height": 1
    },
    {
        "id": "e3e40410a24670ec",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 88,
        "width": 4,
        "height": 1
    },
    {
        "id": "90d6af0dc59ba565",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 90,
        "width": 4,
        "height": 1
    },
    {
        "id": "d826bae3ebb4b7a4",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 92,
        "width": 5,
        "height": 1
    },
    {
        "id": "23e6cd27e61438a9",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 94,
        "width": 5,
        "height": 1
    },
    {
        "id": "bde254ed4587cc47",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 95,
        "width": 4,
        "height": 1
    },
    {
        "id": "1f65ffc89b320a39",
        "type": "ui_spacer",
        "z": "842a49df1ddff959",
        "name": "spacer",
        "group": "7bd63622b6be217a",
        "order": 97,
        "width": 4,
        "height": 1
    },
    {
        "id": "689e398d08a55dc5",
        "type": "mqtt in",
        "z": "842a49df1ddff959",
        "name": "",
        "topic": "/myairdetector/pub",
        "qos": "0",
        "datatype": "utf8",
        "broker": "74f147a7b6f76b2e",
        "nl": true,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 640,
        "wires": [
            [
                "d9da4b53e0d0bcd4",
                "191e14742ceeb066",
                "fc4e38b6afbc75dc",
                "8f3354fd23bf0bbf",
                "b0d0dadd83563452",
                "7f101ab344e2c934",
                "610fa559aa72912c",
                "955d968cad882b64",
                "7b55d1c892825c0a",
                "9cbdca5a7308a56b",
                "041f8582b3b0eddb",
                "9553065ed2f45f3a",
                "e28f06faa6f5c43f",
                "703392b350d44c5f",
                "dea9476e030b0b84",
                "8a6c379b4308501b"
            ]
        ]
    },
    {
        "id": "f7d3ae39a567494d",
        "type": "mqtt out",
        "z": "842a49df1ddff959",
        "name": "",
        "topic": "/myairdetector/sub",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "74f147a7b6f76b2e",
        "x": 410,
        "y": 40,
        "wires": []
    },
    {
        "id": "72c4469f51f010ac",
        "type": "ui_button",
        "z": "842a49df1ddff959",
        "name": "",
        "group": "68971ee8902a712e",
        "order": 1,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "open AC_H",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "1",
        "icon": "",
        "payload": "{\"target\":\"AC_H\",\"value\":1}",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 130,
        "y": 40,
        "wires": [
            [
                "f7d3ae39a567494d"
            ]
        ]
    },
    {
        "id": "b1c9325ffc7e1e9d",
        "type": "ui_button",
        "z": "842a49df1ddff959",
        "name": "",
        "group": "68971ee8902a712e",
        "order": 22,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "open humidifier",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "{\"target\":\"Humidifier\",\"value\":1}",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 640,
        "y": 40,
        "wires": [
            [
                "9d191e9db7c60cbd"
            ]
        ]
    },
    {
        "id": "cc2f2bf3a9c4d7f4",
        "type": "mqtt out",
        "z": "842a49df1ddff959",
        "name": "",
        "topic": "/myairdetector/sub",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "74f147a7b6f76b2e",
        "x": 410,
        "y": 100,
        "wires": []
    },
    {
        "id": "656faf4e6a311b77",
        "type": "ui_button",
        "z": "842a49df1ddff959",
        "name": "",
        "group": "68971ee8902a712e",
        "order": 10,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "close AC_H",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "1",
        "icon": "",
        "payload": "{\"target\":\"AC_H\",\"value\":0}",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 130,
        "y": 100,
        "wires": [
            [
                "cc2f2bf3a9c4d7f4"
            ]
        ]
    },
    {
        "id": "ccad1ab11e223009",
        "type": "ui_button",
        "z": "842a49df1ddff959",
        "name": "",
        "group": "68971ee8902a712e",
        "order": 25,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "close Humidifier",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "{\"target\":\"Humidifier\",\"value\":0}",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 640,
        "y": 100,
        "wires": [
            [
                "cf63f542580c7ad2"
            ]
        ]
    },
    {
        "id": "21245bef05cd6ba8",
        "type": "ui_button",
        "z": "842a49df1ddff959",
        "name": "",
        "group": "68971ee8902a712e",
        "order": 28,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "open Alarm",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "{\"target\":\"Alarm\",\"value\":1}",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 630,
        "y": 160,
        "wires": [
            [
                "3f6a150b9abdf783"
            ]
        ]
    },
    {
        "id": "9d0a445cf57ec81f",
        "type": "ui_button",
        "z": "842a49df1ddff959",
        "name": "",
        "group": "68971ee8902a712e",
        "order": 30,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "close Alarm",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "{\"target\":\"Alarm\",\"value\":0}",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 630,
        "y": 220,
        "wires": [
            [
                "5ad8c7b33c0706ed"
            ]
        ]
    },
    {
        "id": "9d191e9db7c60cbd",
        "type": "mqtt out",
        "z": "842a49df1ddff959",
        "name": "",
        "topic": "/myairdetector/sub",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "74f147a7b6f76b2e",
        "x": 910,
        "y": 40,
        "wires": []
    },
    {
        "id": "cf63f542580c7ad2",
        "type": "mqtt out",
        "z": "842a49df1ddff959",
        "name": "",
        "topic": "/myairdetector/sub",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "74f147a7b6f76b2e",
        "x": 910,
        "y": 100,
        "wires": []
    },
    {
        "id": "3f6a150b9abdf783",
        "type": "mqtt out",
        "z": "842a49df1ddff959",
        "name": "",
        "topic": "/myairdetector/sub",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "74f147a7b6f76b2e",
        "x": 910,
        "y": 160,
        "wires": []
    },
    {
        "id": "5ad8c7b33c0706ed",
        "type": "mqtt out",
        "z": "842a49df1ddff959",
        "name": "",
        "topic": "/myairdetector/sub",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "74f147a7b6f76b2e",
        "x": 910,
        "y": 220,
        "wires": []
    },
    {
        "id": "c120b540e88f18a4",
        "type": "ui_gauge",
        "z": "842a49df1ddff959",
        "name": "",
        "group": "68971ee8902a712e",
        "order": 12,
        "width": 5,
        "height": 5,
        "gtype": "donut",
        "title": "Temperature",
        "label": "C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 770,
        "y": 340,
        "wires": []
    },
    {
        "id": "d9da4b53e0d0bcd4",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 1",
        "func": "//Extracts a particular piece of data from a data group.\nif (typeof msg.payload === 'string' || msg.payload instanceof String) {\n    try {\n        var msg_json = JSON.parse(msg.payload);\n\n        var num_value = msg_json.Tem;\n        console.log(\"Received JSON message: \", msg_json);\n        console.log(\"Number value: \", num_value);\n\n        msg.payload = num_value;\n        return msg;\n    } catch (e) {\n        node.warn(\"Error parsing JSON: \" + e);\n        return null;\n    }\n} else {\n\n    node.warn(\"Invalid JSON string: \" + msg.payload);\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 340,
        "wires": [
            [
                "c120b540e88f18a4",
                "f5539b039627deae",
                "a936beab51448732",
                "30f778aa948149a5"
            ]
        ]
    },
    {
        "id": "f5539b039627deae",
        "type": "ui_chart",
        "z": "842a49df1ddff959",
        "name": "",
        "group": "d645c3c23d3db10a",
        "order": 1,
        "width": 11,
        "height": 9,
        "label": "Temperature",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "10",
        "ymax": "50",
        "removeOlder": "30",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#30b31e",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#68e377",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 590,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "191e14742ceeb066",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 2",
        "func": "\n\n// 判断 msg.payload 是否为 JSON 字符串\nif (typeof msg.payload === 'string' || msg.payload instanceof String) {\n    try {\n        // 解析 JSON 字符串\n        var msg_json = JSON.parse(msg.payload);\n\n        // 获取数值部分并将其存储到一个变量中\n        var num_value = msg_json.Hum;\n\n        // 输出调试信息\n        console.log(\"Received JSON message: \", msg_json);\n        console.log(\"Number value: \", num_value);\n\n        // 将消息负载更新为数值部分，并将其返回\n        msg.payload = num_value;\n        return msg;\n    } catch (e) {\n        // 解析 JSON 失败，输出错误信息\n        node.warn(\"Error parsing JSON: \" + e);\n        return null;\n    }\n} else {\n    // msg.payload 不是 JSON 字符串，输出错误信息\n    node.warn(\"Invalid JSON string: \" + msg.payload);\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 460,
        "wires": [
            [
                "893cbfd429fb107a",
                "3e4848b289a26466",
                "78d9036f52ab2347",
                "056c8e3eeb65a745"
            ]
        ]
    },
    {
        "id": "041f8582b3b0eddb",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 3",
        "func": "\n\n// 判断 msg.payload 是否为 JSON 字符串\nif (typeof msg.payload === 'string' || msg.payload instanceof String) {\n    try {\n        // 解析 JSON 字符串\n        var msg_json = JSON.parse(msg.payload);\n\n        // 获取数值部分并将其存储到一个变量中\n        var num_value = msg_json.Light;\n\n        // 输出调试信息\n        console.log(\"Received JSON message: \", msg_json);\n        console.log(\"Number value: \", num_value);\n\n        // 将消息负载更新为数值部分，并将其返回\n        msg.payload = num_value;\n        return msg;\n    } catch (e) {\n        // 解析 JSON 失败，输出错误信息\n        node.warn(\"Error parsing JSON: \" + e);\n        return null;\n    }\n} else {\n    // msg.payload 不是 JSON 字符串，输出错误信息\n    node.warn(\"Invalid JSON string: \" + msg.payload);\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 580,
        "wires": [
            [
                "82d4a832fcdf2233",
                "a1d58622961d3412",
                "faab04e38df9f07a",
                "87d8760f61dff3fc"
            ]
        ]
    },
    {
        "id": "a936beab51448732",
        "type": "ui_text",
        "z": "842a49df1ddff959",
        "group": "68971ee8902a712e",
        "order": 3,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "Temperature",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 590,
        "y": 320,
        "wires": [],
        "icon": "node-red/arduino.png"
    },
    {
        "id": "893cbfd429fb107a",
        "type": "ui_text",
        "z": "842a49df1ddff959",
        "group": "68971ee8902a712e",
        "order": 5,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "Humidity",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 580,
        "y": 440,
        "wires": [],
        "icon": "node-red/arduino.png"
    },
    {
        "id": "3e4848b289a26466",
        "type": "ui_gauge",
        "z": "842a49df1ddff959",
        "name": "",
        "group": "68971ee8902a712e",
        "order": 13,
        "width": 5,
        "height": 5,
        "gtype": "donut",
        "title": "Humidity",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 760,
        "y": 460,
        "wires": []
    },
    {
        "id": "78d9036f52ab2347",
        "type": "ui_chart",
        "z": "842a49df1ddff959",
        "name": "",
        "group": "d645c3c23d3db10a",
        "order": 3,
        "width": 11,
        "height": 9,
        "label": "Humidity",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "20",
        "ymax": "60",
        "removeOlder": "30",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#30b31e",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#68e377",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 580,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "82d4a832fcdf2233",
        "type": "ui_text",
        "z": "842a49df1ddff959",
        "group": "68971ee8902a712e",
        "order": 7,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "Light",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 570,
        "y": 560,
        "wires": [],
        "icon": "node-red/arduino.png"
    },
    {
        "id": "a1d58622961d3412",
        "type": "ui_gauge",
        "z": "842a49df1ddff959",
        "name": "",
        "group": "68971ee8902a712e",
        "order": 14,
        "width": 5,
        "height": 5,
        "gtype": "donut",
        "title": "Light intensity",
        "label": "Lx",
        "format": "{{value}}",
        "min": 0,
        "max": "2000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 780,
        "y": 580,
        "wires": []
    },
    {
        "id": "faab04e38df9f07a",
        "type": "ui_chart",
        "z": "842a49df1ddff959",
        "name": "",
        "group": "d645c3c23d3db10a",
        "order": 13,
        "width": 11,
        "height": 9,
        "label": "Light intensity",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "3000",
        "removeOlder": "30",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#30b31e",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#68e377",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 600,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "8a6c379b4308501b",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 4",
        "func": "\n\n// 判断 msg.payload 是否为 JSON 字符串\nif (typeof msg.payload === 'string' || msg.payload instanceof String) {\n    try {\n        // 解析 JSON 字符串\n        var msg_json = JSON.parse(msg.payload);\n\n        // 获取数值部分并将其存储到一个变量中\n        var num_value = msg_json.AC_H;\n\n        // 输出调试信息\n        console.log(\"Received JSON message: \", msg_json);\n        console.log(\"Number value: \", num_value);\n\n        // 将消息负载更新为数值部分，并将其返回\n        msg.payload = num_value;\n        return msg;\n    } catch (e) {\n        // 解析 JSON 失败，输出错误信息\n        node.warn(\"Error parsing JSON: \" + e);\n        return null;\n    }\n} else {\n    // msg.payload 不是 JSON 字符串，输出错误信息\n    node.warn(\"Invalid JSON string: \" + msg.payload);\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 700,
        "wires": [
            [
                "30765029109b9b32",
                "d59d3c184873d93d",
                "0d73329f0896c6f2"
            ]
        ]
    },
    {
        "id": "30765029109b9b32",
        "type": "ui_chart",
        "z": "842a49df1ddff959",
        "name": "",
        "group": "d645c3c23d3db10a",
        "order": 63,
        "width": 11,
        "height": 4,
        "label": "Air conditioning heating status",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "2",
        "removeOlder": "30",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#30b31e",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#68e377",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 650,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "fc4e38b6afbc75dc",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 6",
        "func": "\n\n// 判断 msg.payload 是否为 JSON 字符串\nif (typeof msg.payload === 'string' || msg.payload instanceof String) {\n    try {\n        // 解析 JSON 字符串\n        var msg_json = JSON.parse(msg.payload);\n\n        // 获取数值部分并将其存储到一个变量中\n        var num_value = msg_json.Humidifier;\n\n        // 输出调试信息\n        console.log(\"Received JSON message: \", msg_json);\n        console.log(\"Number value: \", num_value);\n\n        // 将消息负载更新为数值部分，并将其返回\n        msg.payload = num_value;\n        return msg;\n    } catch (e) {\n        // 解析 JSON 失败，输出错误信息\n        node.warn(\"Error parsing JSON: \" + e);\n        return null;\n    }\n} else {\n    // msg.payload 不是 JSON 字符串，输出错误信息\n    node.warn(\"Invalid JSON string: \" + msg.payload);\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 940,
        "wires": [
            [
                "f34add0a993acf0f",
                "4073575d058a5dde",
                "5c7c54185c0a7dbf"
            ]
        ]
    },
    {
        "id": "8f3354fd23bf0bbf",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 7",
        "func": "\n\n// 判断 msg.payload 是否为 JSON 字符串\nif (typeof msg.payload === 'string' || msg.payload instanceof String) {\n    try {\n        // 解析 JSON 字符串\n        var msg_json = JSON.parse(msg.payload);\n\n        // 获取数值部分并将其存储到一个变量中\n        var num_value = msg_json.Alarm;\n\n        // 输出调试信息\n        console.log(\"Received JSON message: \", msg_json);\n        console.log(\"Number value: \", num_value);\n\n        // 将消息负载更新为数值部分，并将其返回\n        msg.payload = num_value;\n        return msg;\n    } catch (e) {\n        // 解析 JSON 失败，输出错误信息\n        node.warn(\"Error parsing JSON: \" + e);\n        return null;\n    }\n} else {\n    // msg.payload 不是 JSON 字符串，输出错误信息\n    node.warn(\"Invalid JSON string: \" + msg.payload);\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1060,
        "wires": [
            [
                "1c94c5a05f772085",
                "1e8fcabf9c15712c",
                "5ef0e020270dc780",
                "b0b44896b7428256"
            ]
        ]
    },
    {
        "id": "d59d3c184873d93d",
        "type": "ui_text",
        "z": "842a49df1ddff959",
        "group": "68971ee8902a712e",
        "order": 46,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "Air conditioning heating",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 630,
        "y": 680,
        "wires": [],
        "icon": "node-red/arduino.png"
    },
    {
        "id": "f34add0a993acf0f",
        "type": "ui_text",
        "z": "842a49df1ddff959",
        "group": "68971ee8902a712e",
        "order": 49,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "Humidifier",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 580,
        "y": 920,
        "wires": [],
        "icon": "node-red/arduino.png"
    },
    {
        "id": "4073575d058a5dde",
        "type": "ui_chart",
        "z": "842a49df1ddff959",
        "name": "",
        "group": "d645c3c23d3db10a",
        "order": 68,
        "width": 11,
        "height": 4,
        "label": "Humidifier status",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "2",
        "removeOlder": "30",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#30b31e",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#68e377",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 610,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "1c94c5a05f772085",
        "type": "ui_text",
        "z": "842a49df1ddff959",
        "group": "68971ee8902a712e",
        "order": 52,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "Alarm",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 570,
        "y": 1040,
        "wires": [],
        "icon": "node-red/arduino.png"
    },
    {
        "id": "1e8fcabf9c15712c",
        "type": "ui_chart",
        "z": "842a49df1ddff959",
        "name": "",
        "group": "d645c3c23d3db10a",
        "order": 70,
        "width": 11,
        "height": 4,
        "label": "Alarm status",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "2",
        "removeOlder": "30",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#30b31e",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#68e377",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 590,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "9553065ed2f45f3a",
        "type": "debug",
        "z": "842a49df1ddff959",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 120,
        "y": 720,
        "wires": []
    },
    {
        "id": "324e492f7822b1a1",
        "type": "ui_toast",
        "z": "842a49df1ddff959",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Alarm",
        "name": "",
        "x": 900,
        "y": 1100,
        "wires": []
    },
    {
        "id": "213b4c132f1fe304",
        "type": "ui_switch",
        "z": "842a49df1ddff959",
        "name": "",
        "label": "switch",
        "tooltip": "",
        "group": "68971ee8902a712e",
        "order": 9,
        "width": 1,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "0",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 910,
        "y": 1060,
        "wires": [
            [
                "324e492f7822b1a1"
            ]
        ]
    },
    {
        "id": "5ef0e020270dc780",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 7",
        "func": "var previousValue = null; //Saves the previous value\n\nif (msg.payload === 1) { // If the received value is 1\n    if (previousValue !== 1) { // If the value differs from previous ones\n        msg.payload = true; // Output of \"true\n        previousValue = 1; //Saving the current value\n    }\n} else { // If the value remains unchanged, there is no output\n    msg = null; // Removing the output\n}\n\nreturn msg; // Return of the output\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 1060,
        "wires": [
            [
                "213b4c132f1fe304"
            ]
        ]
    },
    {
        "id": "4ad18f1b3243d4cd",
        "type": "ui_gauge",
        "z": "842a49df1ddff959",
        "name": "",
        "group": "68971ee8902a712e",
        "order": 39,
        "width": 5,
        "height": 5,
        "gtype": "donut",
        "title": "PM2.5",
        "label": "ppm",
        "format": "{{value}}",
        "min": 0,
        "max": "1000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 830,
        "y": 1200,
        "wires": []
    },
    {
        "id": "b0d0dadd83563452",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 9",
        "func": "\n\n// 判断 msg.payload 是否为 JSON 字符串\nif (typeof msg.payload === 'string' || msg.payload instanceof String) {\n    try {\n        // 解析 JSON 字符串\n        var msg_json = JSON.parse(msg.payload);\n\n        // 获取数值部分并将其存储到一个变量中\n        var num_value = msg_json.PM25;\n\n        // 输出调试信息\n        console.log(\"Received JSON message: \", msg_json);\n        console.log(\"Number value: \", num_value);\n\n        // 将消息负载更新为数值部分，并将其返回\n        msg.payload = num_value;\n        return msg;\n    } catch (e) {\n        // 解析 JSON 失败，输出错误信息\n        node.warn(\"Error parsing JSON: \" + e);\n        return null;\n    }\n} else {\n    // msg.payload 不是 JSON 字符串，输出错误信息\n    node.warn(\"Invalid JSON string: \" + msg.payload);\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1200,
        "wires": [
            [
                "4ad18f1b3243d4cd",
                "7360efd56d57b67f",
                "1d4c5c6bb424dc16",
                "03f101a5376ac3ae"
            ]
        ]
    },
    {
        "id": "7360efd56d57b67f",
        "type": "ui_chart",
        "z": "842a49df1ddff959",
        "name": "",
        "group": "d645c3c23d3db10a",
        "order": 15,
        "width": 11,
        "height": 9,
        "label": "PM2.5 status",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "1000",
        "removeOlder": "30",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#30b31e",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#68e377",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 590,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "7f101ab344e2c934",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 10",
        "func": "\n\n// 判断 msg.payload 是否为 JSON 字符串\nif (typeof msg.payload === 'string' || msg.payload instanceof String) {\n    try {\n        // 解析 JSON 字符串\n        var msg_json = JSON.parse(msg.payload);\n\n        // 获取数值部分并将其存储到一个变量中\n        var num_value = msg_json.AQ;\n\n        // 输出调试信息\n        console.log(\"Received JSON message: \", msg_json);\n        console.log(\"Number value: \", num_value);\n\n        // 将消息负载更新为数值部分，并将其返回\n        msg.payload = num_value;\n        return msg;\n    } catch (e) {\n        // 解析 JSON 失败，输出错误信息\n        node.warn(\"Error parsing JSON: \" + e);\n        return null;\n    }\n} else {\n    // msg.payload 不是 JSON 字符串，输出错误信息\n    node.warn(\"Invalid JSON string: \" + msg.payload);\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1320,
        "wires": [
            [
                "dc43b019f25ea0f1",
                "eaad7fde6bc65f29",
                "9e66807b985fe491",
                "207bfa3eeca114fb"
            ]
        ]
    },
    {
        "id": "610fa559aa72912c",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 11",
        "func": "\n\n// 判断 msg.payload 是否为 JSON 字符串\nif (typeof msg.payload === 'string' || msg.payload instanceof String) {\n    try {\n        // 解析 JSON 字符串\n        var msg_json = JSON.parse(msg.payload);\n\n        // 获取数值部分并将其存储到一个变量中\n        var num_value = msg_json.Gas;\n\n        // 输出调试信息\n        console.log(\"Received JSON message: \", msg_json);\n        console.log(\"Number value: \", num_value);\n\n        // 将消息负载更新为数值部分，并将其返回\n        msg.payload = num_value;\n        return msg;\n    } catch (e) {\n        // 解析 JSON 失败，输出错误信息\n        node.warn(\"Error parsing JSON: \" + e);\n        return null;\n    }\n} else {\n    // msg.payload 不是 JSON 字符串，输出错误信息\n    node.warn(\"Invalid JSON string: \" + msg.payload);\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1440,
        "wires": [
            [
                "6f2d1a253bfe6ede",
                "4f5f3e4dbc01e246",
                "20cafef116a44202",
                "334783790cf40bde"
            ]
        ]
    },
    {
        "id": "1d4c5c6bb424dc16",
        "type": "ui_text",
        "z": "842a49df1ddff959",
        "group": "68971ee8902a712e",
        "order": 32,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "PM2.5",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 570,
        "y": 1180,
        "wires": [],
        "icon": "node-red/arduino.png"
    },
    {
        "id": "dc43b019f25ea0f1",
        "type": "ui_text",
        "z": "842a49df1ddff959",
        "group": "68971ee8902a712e",
        "order": 34,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "Air Quality",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 590,
        "y": 1300,
        "wires": [],
        "icon": "node-red/arduino.png"
    },
    {
        "id": "eaad7fde6bc65f29",
        "type": "ui_gauge",
        "z": "842a49df1ddff959",
        "name": "",
        "group": "68971ee8902a712e",
        "order": 40,
        "width": 5,
        "height": 5,
        "gtype": "donut",
        "title": "Air Quality",
        "label": "ppm",
        "format": "{{value}}",
        "min": 0,
        "max": "4000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 850,
        "y": 1320,
        "wires": []
    },
    {
        "id": "9e66807b985fe491",
        "type": "ui_chart",
        "z": "842a49df1ddff959",
        "name": "",
        "group": "d645c3c23d3db10a",
        "order": 25,
        "width": 11,
        "height": 9,
        "label": "Air Quality status",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "3000",
        "removeOlder": "30",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#30b31e",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#68e377",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 610,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "6f2d1a253bfe6ede",
        "type": "ui_text",
        "z": "842a49df1ddff959",
        "group": "68971ee8902a712e",
        "order": 36,
        "width": 5,
        "height": 1,
        "name": "",
        "label": "Combustible gases",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 610,
        "y": 1420,
        "wires": [],
        "icon": "node-red/arduino.png"
    },
    {
        "id": "4f5f3e4dbc01e246",
        "type": "ui_gauge",
        "z": "842a49df1ddff959",
        "name": "",
        "group": "68971ee8902a712e",
        "order": 41,
        "width": 5,
        "height": 5,
        "gtype": "donut",
        "title": "Combustible gases",
        "label": "ppm",
        "format": "{{value}}",
        "min": 0,
        "max": "4000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 870,
        "y": 1440,
        "wires": []
    },
    {
        "id": "20cafef116a44202",
        "type": "ui_chart",
        "z": "842a49df1ddff959",
        "name": "",
        "group": "d645c3c23d3db10a",
        "order": 27,
        "width": 11,
        "height": 9,
        "label": "Combustible gases status",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "3000",
        "removeOlder": "30",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#30b31e",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#68e377",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 630,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "31151460d1dfc6ab",
        "type": "ui_gauge",
        "z": "842a49df1ddff959",
        "name": "",
        "group": "68971ee8902a712e",
        "order": 62,
        "width": 5,
        "height": 5,
        "gtype": "donut",
        "title": "Smoke",
        "label": "ppm",
        "format": "{{value}}",
        "min": 0,
        "max": "4000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 840,
        "y": 1560,
        "wires": []
    },
    {
        "id": "955d968cad882b64",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 12",
        "func": "\n\n// 判断 msg.payload 是否为 JSON 字符串\nif (typeof msg.payload === 'string' || msg.payload instanceof String) {\n    try {\n        // 解析 JSON 字符串\n        var msg_json = JSON.parse(msg.payload);\n\n        // 获取数值部分并将其存储到一个变量中\n        var num_value = msg_json.smoke;\n\n        // 输出调试信息\n        console.log(\"Received JSON message: \", msg_json);\n        console.log(\"Number value: \", num_value);\n\n        // 将消息负载更新为数值部分，并将其返回\n        msg.payload = num_value;\n        return msg;\n    } catch (e) {\n        // 解析 JSON 失败，输出错误信息\n        node.warn(\"Error parsing JSON: \" + e);\n        return null;\n    }\n} else {\n    // msg.payload 不是 JSON 字符串，输出错误信息\n    node.warn(\"Invalid JSON string: \" + msg.payload);\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1560,
        "wires": [
            [
                "31151460d1dfc6ab",
                "72b53c54adeca8a1",
                "bad9de15685b5798",
                "997fa8c47cd6500d"
            ]
        ]
    },
    {
        "id": "72b53c54adeca8a1",
        "type": "ui_chart",
        "z": "842a49df1ddff959",
        "name": "",
        "group": "d645c3c23d3db10a",
        "order": 37,
        "width": 11,
        "height": 9,
        "label": "Smoke status",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "2500",
        "removeOlder": "30",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#30b31e",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#68e377",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 600,
        "y": 1580,
        "wires": [
            []
        ]
    },
    {
        "id": "dea9476e030b0b84",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 13",
        "func": "\n\n// 判断 msg.payload 是否为 JSON 字符串\nif (typeof msg.payload === 'string' || msg.payload instanceof String) {\n    try {\n        // 解析 JSON 字符串\n        var msg_json = JSON.parse(msg.payload);\n\n        // 获取数值部分并将其存储到一个变量中\n        var num_value = msg_json.CO;\n\n        // 输出调试信息\n        console.log(\"Received JSON message: \", msg_json);\n        console.log(\"Number value: \", num_value);\n\n        // 将消息负载更新为数值部分，并将其返回\n        msg.payload = num_value;\n        return msg;\n    } catch (e) {\n        // 解析 JSON 失败，输出错误信息\n        node.warn(\"Error parsing JSON: \" + e);\n        return null;\n    }\n} else {\n    // msg.payload 不是 JSON 字符串，输出错误信息\n    node.warn(\"Invalid JSON string: \" + msg.payload);\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1680,
        "wires": [
            [
                "f5cdf87eb4143a23",
                "7bd1e7e5857dbf38",
                "25cce666ab5e7f7d",
                "dad490b08653b544"
            ]
        ]
    },
    {
        "id": "7b55d1c892825c0a",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 14",
        "func": "\n\n// 判断 msg.payload 是否为 JSON 字符串\nif (typeof msg.payload === 'string' || msg.payload instanceof String) {\n    try {\n        // 解析 JSON 字符串\n        var msg_json = JSON.parse(msg.payload);\n\n        // 获取数值部分并将其存储到一个变量中\n        var num_value = msg_json.BMP;\n\n        // 输出调试信息\n        console.log(\"Received JSON message: \", msg_json);\n        console.log(\"Number value: \", num_value);\n\n        // 将消息负载更新为数值部分，并将其返回\n        msg.payload = num_value;\n        return msg;\n    } catch (e) {\n        // 解析 JSON 失败，输出错误信息\n        node.warn(\"Error parsing JSON: \" + e);\n        return null;\n    }\n} else {\n    // msg.payload 不是 JSON 字符串，输出错误信息\n    node.warn(\"Invalid JSON string: \" + msg.payload);\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1800,
        "wires": [
            [
                "207825f9e3d13eeb",
                "484ee0af5b922d9f",
                "5f08c9d7b635b4fd",
                "e46aeda97cd358e7"
            ]
        ]
    },
    {
        "id": "bad9de15685b5798",
        "type": "ui_text",
        "z": "842a49df1ddff959",
        "group": "68971ee8902a712e",
        "order": 57,
        "width": 5,
        "height": 1,
        "name": "",
        "label": "Smoke",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 580,
        "y": 1540,
        "wires": [],
        "icon": "node-red/arduino.png"
    },
    {
        "id": "f5cdf87eb4143a23",
        "type": "ui_text",
        "z": "842a49df1ddff959",
        "group": "68971ee8902a712e",
        "order": 58,
        "width": 5,
        "height": 1,
        "name": "",
        "label": "Carbon monoxide",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 610,
        "y": 1660,
        "wires": [],
        "icon": "node-red/arduino.png"
    },
    {
        "id": "7bd1e7e5857dbf38",
        "type": "ui_gauge",
        "z": "842a49df1ddff959",
        "name": "",
        "group": "68971ee8902a712e",
        "order": 63,
        "width": 5,
        "height": 5,
        "gtype": "donut",
        "title": "Carbon monoxide",
        "label": "ppm",
        "format": "{{value}}",
        "min": 0,
        "max": "4000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 870,
        "y": 1680,
        "wires": []
    },
    {
        "id": "25cce666ab5e7f7d",
        "type": "ui_chart",
        "z": "842a49df1ddff959",
        "name": "",
        "group": "d645c3c23d3db10a",
        "order": 39,
        "width": 11,
        "height": 9,
        "label": "Carbon monoxide status",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "1500",
        "removeOlder": "30",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#30b31e",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#68e377",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 630,
        "y": 1700,
        "wires": [
            []
        ]
    },
    {
        "id": "207825f9e3d13eeb",
        "type": "ui_text",
        "z": "842a49df1ddff959",
        "group": "68971ee8902a712e",
        "order": 59,
        "width": 5,
        "height": 1,
        "name": "",
        "label": "Atmospheric pressure",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 620,
        "y": 1780,
        "wires": [],
        "icon": "node-red/arduino.png"
    },
    {
        "id": "484ee0af5b922d9f",
        "type": "ui_gauge",
        "z": "842a49df1ddff959",
        "name": "",
        "group": "68971ee8902a712e",
        "order": 64,
        "width": 5,
        "height": 5,
        "gtype": "gage",
        "title": "Atmospheric pressure",
        "label": "ppm",
        "format": "{{value}}",
        "min": 0,
        "max": "2000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 880,
        "y": 1800,
        "wires": []
    },
    {
        "id": "5f08c9d7b635b4fd",
        "type": "ui_chart",
        "z": "842a49df1ddff959",
        "name": "",
        "group": "d645c3c23d3db10a",
        "order": 49,
        "width": 11,
        "height": 9,
        "label": "Atmospheric pressure status",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "500",
        "ymax": "1500",
        "removeOlder": "30",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#30b31e",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#68e377",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 640,
        "y": 1820,
        "wires": [
            []
        ]
    },
    {
        "id": "703392b350d44c5f",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 16",
        "func": "\n\n// 判断 msg.payload 是否为 JSON 字符串\nif (typeof msg.payload === 'string' || msg.payload instanceof String) {\n    try {\n        // 解析 JSON 字符串\n        var msg_json = JSON.parse(msg.payload);\n\n        // 获取数值部分并将其存储到一个变量中\n        var num_value = msg_json.High;\n\n        // 输出调试信息\n        console.log(\"Received JSON message: \", msg_json);\n        console.log(\"Number value: \", num_value);\n\n        // 将消息负载更新为数值部分，并将其返回\n        msg.payload = num_value;\n        return msg;\n    } catch (e) {\n        // 解析 JSON 失败，输出错误信息\n        node.warn(\"Error parsing JSON: \" + e);\n        return null;\n    }\n} else {\n    // msg.payload 不是 JSON 字符串，输出错误信息\n    node.warn(\"Invalid JSON string: \" + msg.payload);\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1920,
        "wires": [
            [
                "c2159ff2e8c2ee0d",
                "1213480f1dde247c",
                "324ea27e8706807e",
                "a04eec0d0385fdd4"
            ]
        ]
    },
    {
        "id": "c2159ff2e8c2ee0d",
        "type": "ui_text",
        "z": "842a49df1ddff959",
        "group": "68971ee8902a712e",
        "order": 76,
        "width": 5,
        "height": 1,
        "name": "",
        "label": "Relative height",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 600,
        "y": 1900,
        "wires": [],
        "icon": "node-red/arduino.png"
    },
    {
        "id": "1213480f1dde247c",
        "type": "ui_gauge",
        "z": "842a49df1ddff959",
        "name": "",
        "group": "68971ee8902a712e",
        "order": 79,
        "width": 5,
        "height": 5,
        "gtype": "wave",
        "title": "Relative height",
        "label": "ppm",
        "format": "{{value}}",
        "min": "0",
        "max": "500",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 860,
        "y": 1920,
        "wires": []
    },
    {
        "id": "324ea27e8706807e",
        "type": "ui_chart",
        "z": "842a49df1ddff959",
        "name": "",
        "group": "d645c3c23d3db10a",
        "order": 51,
        "width": 11,
        "height": 9,
        "label": "Relative height status",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "-100",
        "ymax": "500",
        "removeOlder": "30",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#30b31e",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#68e377",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 620,
        "y": 1940,
        "wires": [
            []
        ]
    },
    {
        "id": "e28f06faa6f5c43f",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 5",
        "func": "\n\n// 判断 msg.payload 是否为 JSON 字符串\nif (typeof msg.payload === 'string' || msg.payload instanceof String) {\n    try {\n        // 解析 JSON 字符串\n        var msg_json = JSON.parse(msg.payload);\n\n        // 获取数值部分并将其存储到一个变量中\n        var num_value = msg_json.AC_C;\n\n        // 输出调试信息\n        console.log(\"Received JSON message: \", msg_json);\n        console.log(\"Number value: \", num_value);\n\n        // 将消息负载更新为数值部分，并将其返回\n        msg.payload = num_value;\n        return msg;\n    } catch (e) {\n        // 解析 JSON 失败，输出错误信息\n        node.warn(\"Error parsing JSON: \" + e);\n        return null;\n    }\n} else {\n    // msg.payload 不是 JSON 字符串，输出错误信息\n    node.warn(\"Invalid JSON string: \" + msg.payload);\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 820,
        "wires": [
            [
                "8d002c90cb2168c7",
                "e672363d29e24701",
                "76f118d22ed88ca9"
            ]
        ]
    },
    {
        "id": "8d002c90cb2168c7",
        "type": "ui_chart",
        "z": "842a49df1ddff959",
        "name": "",
        "group": "d645c3c23d3db10a",
        "order": 61,
        "width": 11,
        "height": 4,
        "label": "Air conditioning cooling status",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "2",
        "removeOlder": "30",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#30b31e",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#68e377",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 650,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "e672363d29e24701",
        "type": "ui_text",
        "z": "842a49df1ddff959",
        "group": "68971ee8902a712e",
        "order": 43,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "Air conditioning cooling",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 630,
        "y": 800,
        "wires": [],
        "icon": "node-red/arduino.png"
    },
    {
        "id": "7b31b6f94e4f466d",
        "type": "mqtt out",
        "z": "842a49df1ddff959",
        "name": "",
        "topic": "/myairdetector/sub",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "74f147a7b6f76b2e",
        "x": 410,
        "y": 160,
        "wires": []
    },
    {
        "id": "1f904f401cd7ad58",
        "type": "ui_button",
        "z": "842a49df1ddff959",
        "name": "",
        "group": "68971ee8902a712e",
        "order": 16,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "open AC_C",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "1",
        "icon": "",
        "payload": "{\"target\":\"AC_C\",\"value\":1}",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 130,
        "y": 160,
        "wires": [
            [
                "7b31b6f94e4f466d"
            ]
        ]
    },
    {
        "id": "9f4e7c87aecbfed2",
        "type": "mqtt out",
        "z": "842a49df1ddff959",
        "name": "",
        "topic": "/myairdetector/sub",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "74f147a7b6f76b2e",
        "x": 410,
        "y": 220,
        "wires": []
    },
    {
        "id": "09919ef6ec8852a9",
        "type": "ui_button",
        "z": "842a49df1ddff959",
        "name": "",
        "group": "68971ee8902a712e",
        "order": 19,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "close AC_C",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "{\"target\":\"AC_C\",\"value\":0}",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 130,
        "y": 220,
        "wires": [
            [
                "9f4e7c87aecbfed2"
            ]
        ]
    },
    {
        "id": "2f713c5fe462d776",
        "type": "remote-access",
        "z": "842a49df1ddff959",
        "confignode": "5be5dabc59d1197b",
        "name": "",
        "verbose": false,
        "x": 120,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "4f1401564afa4812",
        "type": "mysql",
        "z": "842a49df1ddff959",
        "mydb": "cf85ad42ef49f2d3",
        "name": "",
        "x": 1490,
        "y": 40,
        "wires": [
            [
                "140ee2475f517430"
            ]
        ]
    },
    {
        "id": "f4e51d68fbc1f0c0",
        "type": "inject",
        "z": "842a49df1ddff959",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "90",
        "payloadType": "num",
        "x": 1150,
        "y": 40,
        "wires": [
            [
                "ea4ce74ed4e379df"
            ]
        ]
    },
    {
        "id": "ea4ce74ed4e379df",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 17",
        "func": "// 从 msg.payload 中获取温度值\nvar temperature = msg.payload;\n\n// 获取当前日期和时间，并格式化为 MySQL DATETIME 格式\nvar now = new Date();\nvar year = now.getFullYear();\nvar month = padZero(now.getMonth() + 1);\nvar day = padZero(now.getDate());\nvar hour = padZero(now.getHours());\nvar minute = padZero(now.getMinutes());\nvar second = padZero(now.getSeconds());\nvar current_time = year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + minute + \":\" + second;\n\nfunction padZero(num) {\n    return (num < 10 ? '0' : '') + num;\n}\n\n// 创建插入查询语句\nvar query = \"INSERT INTO air.test (temperature, `time`) VALUES ('\" + temperature + \"', '\" + current_time + \"')\";\n\n// 将查询语句添加到 msg 对象中\nmsg.topic = query;\n\n// 将 msg 对象发送到下一个节点（MySQL 节点）\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 40,
        "wires": [
            [
                "4f1401564afa4812"
            ]
        ]
    },
    {
        "id": "140ee2475f517430",
        "type": "debug",
        "z": "842a49df1ddff959",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1720,
        "y": 40,
        "wires": []
    },
    {
        "id": "fd794213d377c7a5",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 21",
        "func": "var date = new Date(msg.payload);\nvar startDate = date.toISOString().substring(0, 10) + ' 00:00:00';\nvar endDate = date.toISOString().substring(0, 10) + ' 23:59:59';\n\nmsg.topic = \"SELECT tem, DATE_FORMAT(time, '%Y-%m-%d %H:%i:%s') as datetime FROM air.temperature WHERE time BETWEEN '\" + startDate + \"' AND '\" + endDate + \"' ORDER BY time ASC\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 340,
        "wires": [
            [
                "45d9e94df4a15992"
            ]
        ]
    },
    {
        "id": "45d9e94df4a15992",
        "type": "mysql",
        "z": "842a49df1ddff959",
        "mydb": "cf85ad42ef49f2d3",
        "name": "",
        "x": 1530,
        "y": 340,
        "wires": [
            [
                "ae880138b1ce955f",
                "7f7704ccbbae3bba"
            ]
        ]
    },
    {
        "id": "ae880138b1ce955f",
        "type": "debug",
        "z": "842a49df1ddff959",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1720,
        "y": 280,
        "wires": []
    },
    {
        "id": "d65a9b412cee2864",
        "type": "ui_date_picker",
        "z": "842a49df1ddff959",
        "name": "",
        "label": "Temperature",
        "group": "7bd63622b6be217a",
        "order": 5,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 1170,
        "y": 340,
        "wires": [
            [
                "fd794213d377c7a5"
            ]
        ]
    },
    {
        "id": "7f7704ccbbae3bba",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 23",
        "func": "// Select and sort the required data\nvar data = msg.payload.map(function (item) {\n    return {\n        tem: item.tem,\n        datetime: item.datetime\n    }\n}).sort(function (a, b) {\n    return new Date(a.datetime) - new Date(b.datetime);\n});\n\n// Generate HTML tables\nvar table = \"<table><thead><tr><th style='padding: 4px 70px;'>Temperature</th><th style='padding: 4px 70px;'>Time</th></tr></thead><tbody>\";\nfor (var i = 0; i < data.length; i++) {\n    table += \"<tr><td style='padding: 4px 70px;'>\" + data[i].tem + \"</td><td style='padding: 4px 70px;'>\" + data[i].datetime + \"</td></tr>\";\n}\ntable += \"</tbody></table>\";\n// Place the HTML table in a DIV container of fixed height and width\nmsg.payload = \"<div class='scroll-table' style='height: 150px; width: 80%;'>\" + table + \"</div>\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 340,
        "wires": [
            [
                "3563f9cd821b9e2a",
                "8804a30bc1247c2f"
            ]
        ]
    },
    {
        "id": "3563f9cd821b9e2a",
        "type": "ui_template",
        "z": "842a49df1ddff959",
        "group": "7bd63622b6be217a",
        "name": "Temperature",
        "order": 7,
        "width": 0,
        "height": 0,
        "format": "<div ng-bind-html=\"msg.payload | trusted\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1930,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "59084b55b6312df7",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 24",
        "func": "var date = new Date(msg.payload);\nvar startDate = date.toISOString().substring(0, 10) + ' 00:00:00';\nvar endDate = date.toISOString().substring(0, 10) + ' 23:59:59';\n\nmsg.topic = \"SELECT hum, DATE_FORMAT(time, '%Y-%m-%d %H:%i:%s') as datetime FROM air.humidity WHERE time BETWEEN '\" + startDate + \"' AND '\" + endDate + \"' ORDER BY time ASC\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 400,
        "wires": [
            [
                "9e1403c4e89c6d98"
            ]
        ]
    },
    {
        "id": "9e1403c4e89c6d98",
        "type": "mysql",
        "z": "842a49df1ddff959",
        "mydb": "cf85ad42ef49f2d3",
        "name": "",
        "x": 1530,
        "y": 400,
        "wires": [
            [
                "d57a34d99f0fddcd"
            ]
        ]
    },
    {
        "id": "e110f95b4ebe41ad",
        "type": "ui_date_picker",
        "z": "842a49df1ddff959",
        "name": "",
        "label": "Humidity",
        "group": "7bd63622b6be217a",
        "order": 12,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 1180,
        "y": 400,
        "wires": [
            [
                "59084b55b6312df7"
            ]
        ]
    },
    {
        "id": "d57a34d99f0fddcd",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 26",
        "func": "// 选出需要的数据并排序\nvar data = msg.payload.map(function (item) {\n    return {\n        hum: item.hum,\n        datetime: item.datetime\n    }\n}).sort(function (a, b) {\n    // @ts-ignore\n    return new Date(a.datetime) - new Date(b.datetime);\n});\n\n// 生成HTML表格\nvar table = \"<table><thead><tr><th style='padding: 4px 80px;'>Humidity</th><th style='padding: 4px 80px;'>Time</th></tr></thead><tbody>\";\nfor (var i = 0; i < data.length; i++) {\n    table += \"<tr><td style='padding: 4px 80px;'>\" + data[i].hum + \"</td><td style='padding: 4px 80px;'>\" + data[i].datetime + \"</td></tr>\";\n}\ntable += \"</tbody></table>\";\n// 把HTML表格放在一个固定高度和宽度的DIV容器中\nmsg.payload = \"<div class='scroll-table' style='height: 150px; width: 80%;'>\" + table + \"</div>\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 400,
        "wires": [
            [
                "251f0c874a3653f8"
            ]
        ]
    },
    {
        "id": "251f0c874a3653f8",
        "type": "ui_template",
        "z": "842a49df1ddff959",
        "group": "7bd63622b6be217a",
        "name": "Humidity",
        "order": 14,
        "width": 0,
        "height": 0,
        "format": "<div ng-bind-html=\"msg.payload | trusted\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1920,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "9e4696cef19e9dea",
        "type": "ui_text",
        "z": "842a49df1ddff959",
        "group": "7bd63622b6be217a",
        "order": 2,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "Temperature",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 2110,
        "y": 340,
        "wires": []
    },
    {
        "id": "75c71b12ffc2fd93",
        "type": "ui_text",
        "z": "842a49df1ddff959",
        "group": "7bd63622b6be217a",
        "order": 9,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "Humidity",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 2080,
        "y": 400,
        "wires": []
    },
    {
        "id": "ebb0a9a7398f79e1",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 28",
        "func": "var date = new Date(msg.payload);\nvar startDate = date.toISOString().substring(0, 10) + ' 00:00:00';\nvar endDate = date.toISOString().substring(0, 10) + ' 23:59:59';\n\nmsg.topic = \"SELECT light, DATE_FORMAT(time, '%Y-%m-%d %H:%i:%s') as datetime FROM air.light WHERE time BETWEEN '\" + startDate + \"' AND '\" + endDate + \"' ORDER BY time ASC\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 460,
        "wires": [
            [
                "b8a8fb6bc8a6895f"
            ]
        ]
    },
    {
        "id": "b8a8fb6bc8a6895f",
        "type": "mysql",
        "z": "842a49df1ddff959",
        "mydb": "cf85ad42ef49f2d3",
        "name": "",
        "x": 1530,
        "y": 460,
        "wires": [
            [
                "a89cdf9ccabc2085"
            ]
        ]
    },
    {
        "id": "996be7a6a60f6ab4",
        "type": "ui_date_picker",
        "z": "842a49df1ddff959",
        "name": "",
        "label": "Light",
        "group": "7bd63622b6be217a",
        "order": 19,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 1190,
        "y": 460,
        "wires": [
            [
                "ebb0a9a7398f79e1"
            ]
        ]
    },
    {
        "id": "a89cdf9ccabc2085",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 30",
        "func": "// 选出需要的数据并排序\nvar data = msg.payload.map(function (item) {\n    return {\n        light: item.light,\n        datetime: item.datetime\n    }\n}).sort(function (a, b) {\n    // @ts-ignore\n    return new Date(a.datetime) - new Date(b.datetime);\n});\n\n// 生成HTML表格\nvar table = \"<table><thead><tr><th style='padding: 4px 90px;'>Light</th><th style='padding: 4px 90px;'>Time</th></tr></thead><tbody>\";\nfor (var i = 0; i < data.length; i++) {\n    table += \"<tr><td style='padding: 4px 90px;'>\" + data[i].light + \"</td><td style='padding: 4px 90px;'>\" + data[i].datetime + \"</td></tr>\";\n}\ntable += \"</tbody></table>\";\n// 把HTML表格放在一个固定高度和宽度的DIV容器中\nmsg.payload = \"<div class='scroll-table' style='height: 150px; width: 80%;'>\" + table + \"</div>\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 460,
        "wires": [
            [
                "1888c28714b29c4b"
            ]
        ]
    },
    {
        "id": "1888c28714b29c4b",
        "type": "ui_template",
        "z": "842a49df1ddff959",
        "group": "7bd63622b6be217a",
        "name": "Light",
        "order": 21,
        "width": 0,
        "height": 0,
        "format": "<div ng-bind-html=\"msg.payload | trusted\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1910,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "17f86321cfa2412b",
        "type": "ui_text",
        "z": "842a49df1ddff959",
        "group": "7bd63622b6be217a",
        "order": 16,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "Light",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 2050,
        "y": 460,
        "wires": []
    },
    {
        "id": "13426803503cfd93",
        "type": "mysql",
        "z": "842a49df1ddff959",
        "mydb": "cf85ad42ef49f2d3",
        "name": "",
        "x": 750,
        "y": 400,
        "wires": [
            [
                "a79490382672a5e0"
            ]
        ]
    },
    {
        "id": "30f778aa948149a5",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 31",
        "func": "//msg.payload\n////Store the data in MySQL and add a time to each one.\nvar tem = msg.payload;\n\nvar now = new Date();\nvar year = now.getFullYear();\nvar month = padZero(now.getMonth() + 1);\nvar day = padZero(now.getDate());\nvar hour = padZero(now.getHours());\nvar minute = padZero(now.getMinutes());\nvar second = padZero(now.getSeconds());\nvar current_time = year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + minute + \":\" + second;\n\nfunction padZero(num) {\n    return (num < 10 ? '0' : '') + num;\n}\n\nvar query = \"INSERT INTO air.temperature (tem, `time`) VALUES ('\" + tem + \"', '\" + current_time + \"')\";\n\nmsg.topic = query;\n\n//MySQL\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 400,
        "wires": [
            [
                "13426803503cfd93"
            ]
        ]
    },
    {
        "id": "a79490382672a5e0",
        "type": "debug",
        "z": "842a49df1ddff959",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 400,
        "wires": []
    },
    {
        "id": "00d4e4f5cc6f6813",
        "type": "mysql",
        "z": "842a49df1ddff959",
        "mydb": "cf85ad42ef49f2d3",
        "name": "",
        "x": 750,
        "y": 520,
        "wires": [
            [
                "74a440ce6793103e"
            ]
        ]
    },
    {
        "id": "056c8e3eeb65a745",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 32",
        "func": "// 从 msg.payload 中获取温度值\nvar hum = msg.payload;\n\n// 获取当前日期和时间，并格式化为 MySQL DATETIME 格式\nvar now = new Date();\nvar year = now.getFullYear();\nvar month = padZero(now.getMonth() + 1);\nvar day = padZero(now.getDate());\nvar hour = padZero(now.getHours());\nvar minute = padZero(now.getMinutes());\nvar second = padZero(now.getSeconds());\nvar current_time = year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + minute + \":\" + second;\n\nfunction padZero(num) {\n    return (num < 10 ? '0' : '') + num;\n}\n\n// 创建插入查询语句\nvar query = \"INSERT INTO air.humidity (hum, `time`) VALUES ('\" + hum + \"', '\" + current_time + \"')\";\n\n// 将查询语句添加到 msg 对象中\nmsg.topic = query;\n\n// 将 msg 对象发送到下一个节点（MySQL 节点）\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 520,
        "wires": [
            [
                "00d4e4f5cc6f6813"
            ]
        ]
    },
    {
        "id": "74a440ce6793103e",
        "type": "debug",
        "z": "842a49df1ddff959",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 520,
        "wires": []
    },
    {
        "id": "a27d8df847b39d37",
        "type": "mysql",
        "z": "842a49df1ddff959",
        "mydb": "cf85ad42ef49f2d3",
        "name": "",
        "x": 750,
        "y": 640,
        "wires": [
            [
                "03712a66a950baf3"
            ]
        ]
    },
    {
        "id": "87d8760f61dff3fc",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 33",
        "func": "\nvar light = msg.payload;\n\n\nvar now = new Date();\nvar year = now.getFullYear();\nvar month = padZero(now.getMonth() + 1);\nvar day = padZero(now.getDate());\nvar hour = padZero(now.getHours());\nvar minute = padZero(now.getMinutes());\nvar second = padZero(now.getSeconds());\nvar current_time = year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + minute + \":\" + second;\n\nfunction padZero(num) {\n    return (num < 10 ? '0' : '') + num;\n}\n\n\nvar query = \"INSERT INTO air.light (light, `time`) VALUES ('\" + light + \"', '\" + current_time + \"')\";\n\n\nmsg.topic = query;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 640,
        "wires": [
            [
                "a27d8df847b39d37"
            ]
        ]
    },
    {
        "id": "03712a66a950baf3",
        "type": "debug",
        "z": "842a49df1ddff959",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 640,
        "wires": []
    },
    {
        "id": "11694f2f0d03938a",
        "type": "mysql",
        "z": "842a49df1ddff959",
        "mydb": "cf85ad42ef49f2d3",
        "name": "",
        "x": 750,
        "y": 760,
        "wires": [
            [
                "b846f5e8d5a6d42e"
            ]
        ]
    },
    {
        "id": "0d73329f0896c6f2",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 34",
        "func": "// 从 msg.payload 中获取温度值\nvar ac_h = msg.payload;\n\n// 获取当前日期和时间，并格式化为 MySQL DATETIME 格式\nvar now = new Date();\nvar year = now.getFullYear();\nvar month = padZero(now.getMonth() + 1);\nvar day = padZero(now.getDate());\nvar hour = padZero(now.getHours());\nvar minute = padZero(now.getMinutes());\nvar second = padZero(now.getSeconds());\nvar current_time = year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + minute + \":\" + second;\n\nfunction padZero(num) {\n    return (num < 10 ? '0' : '') + num;\n}\n\n// 创建插入查询语句\nvar query = \"INSERT INTO air.ac_h (ac_h, `time`) VALUES ('\" + ac_h + \"', '\" + current_time + \"')\";\n\n// 将查询语句添加到 msg 对象中\nmsg.topic = query;\n\n// 将 msg 对象发送到下一个节点（MySQL 节点）\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 760,
        "wires": [
            [
                "11694f2f0d03938a"
            ]
        ]
    },
    {
        "id": "b846f5e8d5a6d42e",
        "type": "debug",
        "z": "842a49df1ddff959",
        "name": "debug 14",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 760,
        "wires": []
    },
    {
        "id": "6dd62ceace797524",
        "type": "mysql",
        "z": "842a49df1ddff959",
        "mydb": "cf85ad42ef49f2d3",
        "name": "",
        "x": 750,
        "y": 880,
        "wires": [
            [
                "3ee23b2351b8cb5d"
            ]
        ]
    },
    {
        "id": "76f118d22ed88ca9",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 35",
        "func": "// 从 msg.payload 中获取温度值\nvar ac_c = msg.payload;\n\n// 获取当前日期和时间，并格式化为 MySQL DATETIME 格式\nvar now = new Date();\nvar year = now.getFullYear();\nvar month = padZero(now.getMonth() + 1);\nvar day = padZero(now.getDate());\nvar hour = padZero(now.getHours());\nvar minute = padZero(now.getMinutes());\nvar second = padZero(now.getSeconds());\nvar current_time = year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + minute + \":\" + second;\n\nfunction padZero(num) {\n    return (num < 10 ? '0' : '') + num;\n}\n\n// 创建插入查询语句\nvar query = \"INSERT INTO air.ac_c (ac_c, `time`) VALUES ('\" + ac_c + \"', '\" + current_time + \"')\";\n\n// 将查询语句添加到 msg 对象中\nmsg.topic = query;\n\n// 将 msg 对象发送到下一个节点（MySQL 节点）\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 880,
        "wires": [
            [
                "6dd62ceace797524"
            ]
        ]
    },
    {
        "id": "3ee23b2351b8cb5d",
        "type": "debug",
        "z": "842a49df1ddff959",
        "name": "debug 15",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 880,
        "wires": []
    },
    {
        "id": "67862d2835b3f3b6",
        "type": "mysql",
        "z": "842a49df1ddff959",
        "mydb": "cf85ad42ef49f2d3",
        "name": "",
        "x": 750,
        "y": 1000,
        "wires": [
            [
                "7b2ea373194b4911"
            ]
        ]
    },
    {
        "id": "5c7c54185c0a7dbf",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 36",
        "func": "// 从 msg.payload 中获取温度值\nvar humi = msg.payload;\n\n// 获取当前日期和时间，并格式化为 MySQL DATETIME 格式\nvar now = new Date();\nvar year = now.getFullYear();\nvar month = padZero(now.getMonth() + 1);\nvar day = padZero(now.getDate());\nvar hour = padZero(now.getHours());\nvar minute = padZero(now.getMinutes());\nvar second = padZero(now.getSeconds());\nvar current_time = year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + minute + \":\" + second;\n\nfunction padZero(num) {\n    return (num < 10 ? '0' : '') + num;\n}\n\n// 创建插入查询语句\nvar query = \"INSERT INTO air.humidifier (humi, `time`) VALUES ('\" + humi + \"', '\" + current_time + \"')\";\n\n// 将查询语句添加到 msg 对象中\nmsg.topic = query;\n\n// 将 msg 对象发送到下一个节点（MySQL 节点）\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1000,
        "wires": [
            [
                "67862d2835b3f3b6"
            ]
        ]
    },
    {
        "id": "7b2ea373194b4911",
        "type": "debug",
        "z": "842a49df1ddff959",
        "name": "debug 16",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 1000,
        "wires": []
    },
    {
        "id": "cead0b94688cbefe",
        "type": "mysql",
        "z": "842a49df1ddff959",
        "mydb": "cf85ad42ef49f2d3",
        "name": "",
        "x": 750,
        "y": 1140,
        "wires": [
            [
                "1746fe7dfc022feb"
            ]
        ]
    },
    {
        "id": "b0b44896b7428256",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 37",
        "func": "// 从 msg.payload 中获取温度值\nvar alarm = msg.payload;\n\n// 获取当前日期和时间，并格式化为 MySQL DATETIME 格式\nvar now = new Date();\nvar year = now.getFullYear();\nvar month = padZero(now.getMonth() + 1);\nvar day = padZero(now.getDate());\nvar hour = padZero(now.getHours());\nvar minute = padZero(now.getMinutes());\nvar second = padZero(now.getSeconds());\nvar current_time = year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + minute + \":\" + second;\n\nfunction padZero(num) {\n    return (num < 10 ? '0' : '') + num;\n}\n\n// 创建插入查询语句\nvar query = \"INSERT INTO air.alarm (alarm, `time`) VALUES ('\" + alarm + \"', '\" + current_time + \"')\";\n\n// 将查询语句添加到 msg 对象中\nmsg.topic = query;\n\n// 将 msg 对象发送到下一个节点（MySQL 节点）\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1140,
        "wires": [
            [
                "cead0b94688cbefe"
            ]
        ]
    },
    {
        "id": "1746fe7dfc022feb",
        "type": "debug",
        "z": "842a49df1ddff959",
        "name": "debug 17",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 1140,
        "wires": []
    },
    {
        "id": "1713374dcb39c46b",
        "type": "mysql",
        "z": "842a49df1ddff959",
        "mydb": "cf85ad42ef49f2d3",
        "name": "",
        "x": 750,
        "y": 1260,
        "wires": [
            [
                "e707065e418387eb"
            ]
        ]
    },
    {
        "id": "03f101a5376ac3ae",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 38",
        "func": "// 从 msg.payload 中获取温度值\nvar pm2_5 = msg.payload;\n\n// 获取当前日期和时间，并格式化为 MySQL DATETIME 格式\nvar now = new Date();\nvar year = now.getFullYear();\nvar month = padZero(now.getMonth() + 1);\nvar day = padZero(now.getDate());\nvar hour = padZero(now.getHours());\nvar minute = padZero(now.getMinutes());\nvar second = padZero(now.getSeconds());\nvar current_time = year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + minute + \":\" + second;\n\nfunction padZero(num) {\n    return (num < 10 ? '0' : '') + num;\n}\n\n// 创建插入查询语句\nvar query = \"INSERT INTO air.pm2_5 (pm2_5, `time`) VALUES ('\" + pm2_5 + \"', '\" + current_time + \"')\";\n\n// 将查询语句添加到 msg 对象中\nmsg.topic = query;\n\n// 将 msg 对象发送到下一个节点（MySQL 节点）\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1260,
        "wires": [
            [
                "1713374dcb39c46b"
            ]
        ]
    },
    {
        "id": "e707065e418387eb",
        "type": "debug",
        "z": "842a49df1ddff959",
        "name": "debug 18",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 1260,
        "wires": []
    },
    {
        "id": "ed87a09817374f49",
        "type": "mysql",
        "z": "842a49df1ddff959",
        "mydb": "cf85ad42ef49f2d3",
        "name": "",
        "x": 750,
        "y": 1380,
        "wires": [
            [
                "4daa9d7de1bc8a15"
            ]
        ]
    },
    {
        "id": "207bfa3eeca114fb",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 39",
        "func": "// 从 msg.payload 中获取温度值\nvar aq = msg.payload;\n\n// 获取当前日期和时间，并格式化为 MySQL DATETIME 格式\nvar now = new Date();\nvar year = now.getFullYear();\nvar month = padZero(now.getMonth() + 1);\nvar day = padZero(now.getDate());\nvar hour = padZero(now.getHours());\nvar minute = padZero(now.getMinutes());\nvar second = padZero(now.getSeconds());\nvar current_time = year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + minute + \":\" + second;\n\nfunction padZero(num) {\n    return (num < 10 ? '0' : '') + num;\n}\n\n// 创建插入查询语句\nvar query = \"INSERT INTO air.air_quality (aq, `time`) VALUES ('\" + aq + \"', '\" + current_time + \"')\";\n\n// 将查询语句添加到 msg 对象中\nmsg.topic = query;\n\n// 将 msg 对象发送到下一个节点（MySQL 节点）\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1380,
        "wires": [
            [
                "ed87a09817374f49"
            ]
        ]
    },
    {
        "id": "4daa9d7de1bc8a15",
        "type": "debug",
        "z": "842a49df1ddff959",
        "name": "debug 19",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 1380,
        "wires": []
    },
    {
        "id": "c3779151aeb32d04",
        "type": "mysql",
        "z": "842a49df1ddff959",
        "mydb": "cf85ad42ef49f2d3",
        "name": "",
        "x": 750,
        "y": 1500,
        "wires": [
            [
                "45fe8495901caec3"
            ]
        ]
    },
    {
        "id": "334783790cf40bde",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 40",
        "func": "// 从 msg.payload 中获取温度值\nvar gas = msg.payload;\n\n// 获取当前日期和时间，并格式化为 MySQL DATETIME 格式\nvar now = new Date();\nvar year = now.getFullYear();\nvar month = padZero(now.getMonth() + 1);\nvar day = padZero(now.getDate());\nvar hour = padZero(now.getHours());\nvar minute = padZero(now.getMinutes());\nvar second = padZero(now.getSeconds());\nvar current_time = year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + minute + \":\" + second;\n\nfunction padZero(num) {\n    return (num < 10 ? '0' : '') + num;\n}\n\n// 创建插入查询语句\nvar query = \"INSERT INTO air.combustible_gases (gas, `time`) VALUES ('\" + gas + \"', '\" + current_time + \"')\";\n\n// 将查询语句添加到 msg 对象中\nmsg.topic = query;\n\n// 将 msg 对象发送到下一个节点（MySQL 节点）\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1500,
        "wires": [
            [
                "c3779151aeb32d04"
            ]
        ]
    },
    {
        "id": "45fe8495901caec3",
        "type": "debug",
        "z": "842a49df1ddff959",
        "name": "debug 20",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 1500,
        "wires": []
    },
    {
        "id": "7b8917a5bd81b42b",
        "type": "mysql",
        "z": "842a49df1ddff959",
        "mydb": "cf85ad42ef49f2d3",
        "name": "",
        "x": 750,
        "y": 1620,
        "wires": [
            [
                "c34babb700416871"
            ]
        ]
    },
    {
        "id": "997fa8c47cd6500d",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 41",
        "func": "// 从 msg.payload 中获取温度值\nvar smoke = msg.payload;\n\n// 获取当前日期和时间，并格式化为 MySQL DATETIME 格式\nvar now = new Date();\nvar year = now.getFullYear();\nvar month = padZero(now.getMonth() + 1);\nvar day = padZero(now.getDate());\nvar hour = padZero(now.getHours());\nvar minute = padZero(now.getMinutes());\nvar second = padZero(now.getSeconds());\nvar current_time = year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + minute + \":\" + second;\n\nfunction padZero(num) {\n    return (num < 10 ? '0' : '') + num;\n}\n\n// 创建插入查询语句\nvar query = \"INSERT INTO air.smoke (smoke, `time`) VALUES ('\" + smoke + \"', '\" + current_time + \"')\";\n\n// 将查询语句添加到 msg 对象中\nmsg.topic = query;\n\n// 将 msg 对象发送到下一个节点（MySQL 节点）\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1620,
        "wires": [
            [
                "7b8917a5bd81b42b"
            ]
        ]
    },
    {
        "id": "c34babb700416871",
        "type": "debug",
        "z": "842a49df1ddff959",
        "name": "debug 21",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 1620,
        "wires": []
    },
    {
        "id": "3dc2fd3873f3d7f5",
        "type": "mysql",
        "z": "842a49df1ddff959",
        "mydb": "cf85ad42ef49f2d3",
        "name": "",
        "x": 750,
        "y": 1740,
        "wires": [
            [
                "afbaa96f709486c4"
            ]
        ]
    },
    {
        "id": "dad490b08653b544",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 42",
        "func": "// 从 msg.payload 中获取温度值\nvar co = msg.payload;\n\n// 获取当前日期和时间，并格式化为 MySQL DATETIME 格式\nvar now = new Date();\nvar year = now.getFullYear();\nvar month = padZero(now.getMonth() + 1);\nvar day = padZero(now.getDate());\nvar hour = padZero(now.getHours());\nvar minute = padZero(now.getMinutes());\nvar second = padZero(now.getSeconds());\nvar current_time = year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + minute + \":\" + second;\n\nfunction padZero(num) {\n    return (num < 10 ? '0' : '') + num;\n}\n\n// 创建插入查询语句\nvar query = \"INSERT INTO air.carbon_monoxide (co, `time`) VALUES ('\" + co + \"', '\" + current_time + \"')\";\n\n// 将查询语句添加到 msg 对象中\nmsg.topic = query;\n\n// 将 msg 对象发送到下一个节点（MySQL 节点）\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1740,
        "wires": [
            [
                "3dc2fd3873f3d7f5"
            ]
        ]
    },
    {
        "id": "afbaa96f709486c4",
        "type": "debug",
        "z": "842a49df1ddff959",
        "name": "debug 22",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 1740,
        "wires": []
    },
    {
        "id": "ecbcdc8e60f23f1e",
        "type": "mysql",
        "z": "842a49df1ddff959",
        "mydb": "cf85ad42ef49f2d3",
        "name": "",
        "x": 750,
        "y": 1860,
        "wires": [
            [
                "a77e64667c321c86"
            ]
        ]
    },
    {
        "id": "e46aeda97cd358e7",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 43",
        "func": "// 从 msg.payload 中获取温度值\nvar bmp = msg.payload;\n\n// 获取当前日期和时间，并格式化为 MySQL DATETIME 格式\nvar now = new Date();\nvar year = now.getFullYear();\nvar month = padZero(now.getMonth() + 1);\nvar day = padZero(now.getDate());\nvar hour = padZero(now.getHours());\nvar minute = padZero(now.getMinutes());\nvar second = padZero(now.getSeconds());\nvar current_time = year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + minute + \":\" + second;\n\nfunction padZero(num) {\n    return (num < 10 ? '0' : '') + num;\n}\n\n// 创建插入查询语句\nvar query = \"INSERT INTO air.atmospheric_pressure (bmp, `time`) VALUES ('\" + bmp + \"', '\" + current_time + \"')\";\n\n// 将查询语句添加到 msg 对象中\nmsg.topic = query;\n\n// 将 msg 对象发送到下一个节点（MySQL 节点）\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1860,
        "wires": [
            [
                "ecbcdc8e60f23f1e"
            ]
        ]
    },
    {
        "id": "a77e64667c321c86",
        "type": "debug",
        "z": "842a49df1ddff959",
        "name": "debug 23",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 1860,
        "wires": []
    },
    {
        "id": "9c7a6557b33baaf8",
        "type": "mysql",
        "z": "842a49df1ddff959",
        "mydb": "cf85ad42ef49f2d3",
        "name": "",
        "x": 750,
        "y": 1980,
        "wires": [
            [
                "b7a32d7b6176587d"
            ]
        ]
    },
    {
        "id": "a04eec0d0385fdd4",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 44",
        "func": "// 从 msg.payload 中获取温度值\nvar high = msg.payload;\n\n// 获取当前日期和时间，并格式化为 MySQL DATETIME 格式\nvar now = new Date();\nvar year = now.getFullYear();\nvar month = padZero(now.getMonth() + 1);\nvar day = padZero(now.getDate());\nvar hour = padZero(now.getHours());\nvar minute = padZero(now.getMinutes());\nvar second = padZero(now.getSeconds());\nvar current_time = year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + minute + \":\" + second;\n\nfunction padZero(num) {\n    return (num < 10 ? '0' : '') + num;\n}\n\n// 创建插入查询语句\nvar query = \"INSERT INTO air.relative_height (high, `time`) VALUES ('\" + high + \"', '\" + current_time + \"')\";\n\n// 将查询语句添加到 msg 对象中\nmsg.topic = query;\n\n// 将 msg 对象发送到下一个节点（MySQL 节点）\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1980,
        "wires": [
            [
                "9c7a6557b33baaf8"
            ]
        ]
    },
    {
        "id": "b7a32d7b6176587d",
        "type": "debug",
        "z": "842a49df1ddff959",
        "name": "debug 24",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 1980,
        "wires": []
    },
    {
        "id": "8804a30bc1247c2f",
        "type": "debug",
        "z": "842a49df1ddff959",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2240,
        "y": 380,
        "wires": []
    },
    {
        "id": "88c8c0e057ed9ec4",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 45",
        "func": "var date = new Date(msg.payload);\nvar startDate = date.toISOString().substring(0, 10) + ' 00:00:00';\nvar endDate = date.toISOString().substring(0, 10) + ' 23:59:59';\n\nmsg.topic = \"SELECT ac_h, DATE_FORMAT(time, '%Y-%m-%d %H:%i:%s') as datetime FROM air.ac_h WHERE time BETWEEN '\" + startDate + \"' AND '\" + endDate + \"' ORDER BY time ASC\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 520,
        "wires": [
            [
                "99f618a73b6681a3"
            ]
        ]
    },
    {
        "id": "99f618a73b6681a3",
        "type": "mysql",
        "z": "842a49df1ddff959",
        "mydb": "cf85ad42ef49f2d3",
        "name": "",
        "x": 1530,
        "y": 520,
        "wires": [
            [
                "867901153f8b8a89"
            ]
        ]
    },
    {
        "id": "f4867c9c3525928a",
        "type": "ui_date_picker",
        "z": "842a49df1ddff959",
        "name": "",
        "label": "Air conditioning heating",
        "group": "7bd63622b6be217a",
        "order": 26,
        "width": 8,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 1130,
        "y": 520,
        "wires": [
            [
                "88c8c0e057ed9ec4"
            ]
        ]
    },
    {
        "id": "867901153f8b8a89",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 46",
        "func": "// 选出需要的数据并排序\nvar data = msg.payload.map(function (item) {\n    return {\n        ac_h: item.ac_h,\n        datetime: item.datetime\n    }\n}).sort(function (a, b) {\n    // @ts-ignore\n    return new Date(a.datetime) - new Date(b.datetime);\n});\n\n// 生成HTML表格\nvar table = \"<table><thead><tr><th style='padding: 4px 90px;'>ac_h</th><th style='padding: 4px 90px;'>Time</th></tr></thead><tbody>\";\nfor (var i = 0; i < data.length; i++) {\n    table += \"<tr><td style='padding: 4px 90px;'>\" + data[i].ac_h + \"</td><td style='padding: 4px 90px;'>\" + data[i].datetime + \"</td></tr>\";\n}\ntable += \"</tbody></table>\";\n// 把HTML表格放在一个固定高度和宽度的DIV容器中\nmsg.payload = \"<div class='scroll-table' style='height: 150px; width: 80%;'>\" + table + \"</div>\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 520,
        "wires": [
            [
                "78076e103b902def"
            ]
        ]
    },
    {
        "id": "78076e103b902def",
        "type": "ui_template",
        "z": "842a49df1ddff959",
        "group": "7bd63622b6be217a",
        "name": "Air conditioning heating",
        "order": 28,
        "width": 0,
        "height": 0,
        "format": "<div ng-bind-html=\"msg.payload | trusted\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1970,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "9b49758389fe3296",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 47",
        "func": "var date = new Date(msg.payload);\nvar startDate = date.toISOString().substring(0, 10) + ' 00:00:00';\nvar endDate = date.toISOString().substring(0, 10) + ' 23:59:59';\n\nmsg.topic = \"SELECT ac_c, DATE_FORMAT(time, '%Y-%m-%d %H:%i:%s') as datetime FROM air.ac_c WHERE time BETWEEN '\" + startDate + \"' AND '\" + endDate + \"' ORDER BY time ASC\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 580,
        "wires": [
            [
                "d3e0d604ebe85044"
            ]
        ]
    },
    {
        "id": "d3e0d604ebe85044",
        "type": "mysql",
        "z": "842a49df1ddff959",
        "mydb": "cf85ad42ef49f2d3",
        "name": "",
        "x": 1530,
        "y": 580,
        "wires": [
            [
                "9109b1b93b0b2031"
            ]
        ]
    },
    {
        "id": "b9dac3481a2fddfa",
        "type": "ui_date_picker",
        "z": "842a49df1ddff959",
        "name": "",
        "label": "Air conditioning cooling",
        "group": "7bd63622b6be217a",
        "order": 33,
        "width": 8,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 1130,
        "y": 580,
        "wires": [
            [
                "9b49758389fe3296"
            ]
        ]
    },
    {
        "id": "9109b1b93b0b2031",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 48",
        "func": "// 选出需要的数据并排序\nvar data = msg.payload.map(function (item) {\n    return {\n        ac_c: item.ac_c,\n        datetime: item.datetime\n    }\n}).sort(function (a, b) {\n    // @ts-ignore\n    return new Date(a.datetime) - new Date(b.datetime);\n});\n\n// 生成HTML表格\nvar table = \"<table><thead><tr><th style='padding: 4px 90px;'>ac_c</th><th style='padding: 4px 90px;'>Time</th></tr></thead><tbody>\";\nfor (var i = 0; i < data.length; i++) {\n    table += \"<tr><td style='padding: 4px 90px;'>\" + data[i].ac_c + \"</td><td style='padding: 4px 90px;'>\" + data[i].datetime + \"</td></tr>\";\n}\ntable += \"</tbody></table>\";\n// 把HTML表格放在一个固定高度和宽度的DIV容器中\nmsg.payload = \"<div class='scroll-table' style='height: 150px; width: 80%;'>\" + table + \"</div>\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 580,
        "wires": [
            [
                "ac8c1892c67e9cdf"
            ]
        ]
    },
    {
        "id": "ac8c1892c67e9cdf",
        "type": "ui_template",
        "z": "842a49df1ddff959",
        "group": "7bd63622b6be217a",
        "name": "Air conditioning cooling",
        "order": 35,
        "width": 0,
        "height": 0,
        "format": "<div ng-bind-html=\"msg.payload | trusted\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1970,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "7a107af65710912d",
        "type": "ui_text",
        "z": "842a49df1ddff959",
        "group": "7bd63622b6be217a",
        "order": 23,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "Air conditioning heating",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 2230,
        "y": 520,
        "wires": []
    },
    {
        "id": "68efd50afc750fc2",
        "type": "ui_text",
        "z": "842a49df1ddff959",
        "group": "7bd63622b6be217a",
        "order": 30,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "Air conditioning cooling",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 2230,
        "y": 580,
        "wires": []
    },
    {
        "id": "7016708bc3c98287",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 49",
        "func": "var date = new Date(msg.payload);\nvar startDate = date.toISOString().substring(0, 10) + ' 00:00:00';\nvar endDate = date.toISOString().substring(0, 10) + ' 23:59:59';\n\nmsg.topic = \"SELECT humi, DATE_FORMAT(time, '%Y-%m-%d %H:%i:%s') as datetime FROM air.humidifier WHERE time BETWEEN '\" + startDate + \"' AND '\" + endDate + \"' ORDER BY time ASC\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 640,
        "wires": [
            [
                "589ee473c61880c6"
            ]
        ]
    },
    {
        "id": "589ee473c61880c6",
        "type": "mysql",
        "z": "842a49df1ddff959",
        "mydb": "cf85ad42ef49f2d3",
        "name": "",
        "x": 1530,
        "y": 640,
        "wires": [
            [
                "60e95e7f331a7590"
            ]
        ]
    },
    {
        "id": "2068a2fa61780d8a",
        "type": "ui_date_picker",
        "z": "842a49df1ddff959",
        "name": "",
        "label": "Humidifier",
        "group": "7bd63622b6be217a",
        "order": 40,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 1180,
        "y": 640,
        "wires": [
            [
                "7016708bc3c98287"
            ]
        ]
    },
    {
        "id": "60e95e7f331a7590",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 50",
        "func": "// 选出需要的数据并排序\nvar data = msg.payload.map(function (item) {\n    return {\n        humi: item.humi,\n        datetime: item.datetime\n    }\n}).sort(function (a, b) {\n    // @ts-ignore\n    return new Date(a.datetime) - new Date(b.datetime);\n});\n\n// 生成HTML表格\nvar table = \"<table><thead><tr><th style='padding: 4px 75px;'>Humidifier</th><th style='padding: 4px 75px;'>Time</th></tr></thead><tbody>\";\nfor (var i = 0; i < data.length; i++) {\n    table += \"<tr><td style='padding: 4px 75px;'>\" + data[i].humi + \"</td><td style='padding: 4px 75px;'>\" + data[i].datetime + \"</td></tr>\";\n}\ntable += \"</tbody></table>\";\n// 把HTML表格放在一个固定高度和宽度的DIV容器中\nmsg.payload = \"<div class='scroll-table' style='height: 150px; width: 80%;'>\" + table + \"</div>\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 640,
        "wires": [
            [
                "6493beb4d3534a3f"
            ]
        ]
    },
    {
        "id": "6493beb4d3534a3f",
        "type": "ui_template",
        "z": "842a49df1ddff959",
        "group": "7bd63622b6be217a",
        "name": "Humidifier",
        "order": 42,
        "width": 0,
        "height": 0,
        "format": "<div ng-bind-html=\"msg.payload | trusted\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1920,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "131f1197bf1c4d05",
        "type": "ui_text",
        "z": "842a49df1ddff959",
        "group": "7bd63622b6be217a",
        "order": 37,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "Humidifier",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 2080,
        "y": 640,
        "wires": []
    },
    {
        "id": "e759117bda5053d0",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 51",
        "func": "var date = new Date(msg.payload);\nvar startDate = date.toISOString().substring(0, 10) + ' 00:00:00';\nvar endDate = date.toISOString().substring(0, 10) + ' 23:59:59';\n\nmsg.topic = \"SELECT alarm, DATE_FORMAT(time, '%Y-%m-%d %H:%i:%s') as datetime FROM air.alarm WHERE time BETWEEN '\" + startDate + \"' AND '\" + endDate + \"' ORDER BY time ASC\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 700,
        "wires": [
            [
                "e866365ed2017164"
            ]
        ]
    },
    {
        "id": "e866365ed2017164",
        "type": "mysql",
        "z": "842a49df1ddff959",
        "mydb": "cf85ad42ef49f2d3",
        "name": "",
        "x": 1530,
        "y": 700,
        "wires": [
            [
                "0ed544c11e2bc2df"
            ]
        ]
    },
    {
        "id": "1e88ce86f1a2daa8",
        "type": "ui_date_picker",
        "z": "842a49df1ddff959",
        "name": "",
        "label": "Alarm",
        "group": "7bd63622b6be217a",
        "order": 47,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 1190,
        "y": 700,
        "wires": [
            [
                "e759117bda5053d0"
            ]
        ]
    },
    {
        "id": "0ed544c11e2bc2df",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 52",
        "func": "// 选出需要的数据并排序\nvar data = msg.payload.map(function (item) {\n    return {\n        alarm: item.alarm,\n        datetime: item.datetime\n    }\n}).sort(function (a, b) {\n    // @ts-ignore\n    return new Date(a.datetime) - new Date(b.datetime);\n});\n\n// 生成HTML表格\nvar table = \"<table><thead><tr><th style='padding: 4px 90px;'>Alarm</th><th style='padding: 4px 90px;'>Time</th></tr></thead><tbody>\";\nfor (var i = 0; i < data.length; i++) {\n    table += \"<tr><td style='padding: 4px 90px;'>\" + data[i].alarm + \"</td><td style='padding: 4px 90px;'>\" + data[i].datetime + \"</td></tr>\";\n}\ntable += \"</tbody></table>\";\n// 把HTML表格放在一个固定高度和宽度的DIV容器中\nmsg.payload = \"<div class='scroll-table' style='height: 150px; width: 80%;'>\" + table + \"</div>\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 700,
        "wires": [
            [
                "09d2fc23238f6bb9"
            ]
        ]
    },
    {
        "id": "09d2fc23238f6bb9",
        "type": "ui_template",
        "z": "842a49df1ddff959",
        "group": "7bd63622b6be217a",
        "name": "Alarm",
        "order": 49,
        "width": 0,
        "height": 0,
        "format": "<div ng-bind-html=\"msg.payload | trusted\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1910,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "dbbbee7695baeb35",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 53",
        "func": "var date = new Date(msg.payload);\nvar startDate = date.toISOString().substring(0, 10) + ' 00:00:00';\nvar endDate = date.toISOString().substring(0, 10) + ' 23:59:59';\n\nmsg.topic = \"SELECT pm2_5, DATE_FORMAT(time, '%Y-%m-%d %H:%i:%s') as datetime FROM air.pm2_5 WHERE time BETWEEN '\" + startDate + \"' AND '\" + endDate + \"' ORDER BY time ASC\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 760,
        "wires": [
            [
                "a897da1fa3aa92fa"
            ]
        ]
    },
    {
        "id": "a897da1fa3aa92fa",
        "type": "mysql",
        "z": "842a49df1ddff959",
        "mydb": "cf85ad42ef49f2d3",
        "name": "",
        "x": 1530,
        "y": 760,
        "wires": [
            [
                "f967fd8126132f12"
            ]
        ]
    },
    {
        "id": "dbb374a399432d50",
        "type": "ui_date_picker",
        "z": "842a49df1ddff959",
        "name": "",
        "label": "PM2.5",
        "group": "7bd63622b6be217a",
        "order": 54,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 1190,
        "y": 760,
        "wires": [
            [
                "dbbbee7695baeb35"
            ]
        ]
    },
    {
        "id": "f967fd8126132f12",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 54",
        "func": "// 选出需要的数据并排序\nvar data = msg.payload.map(function (item) {\n    return {\n        pm2_5: item.pm2_5,\n        datetime: item.datetime\n    }\n}).sort(function (a, b) {\n    // @ts-ignore\n    return new Date(a.datetime) - new Date(b.datetime);\n});\n\n// 生成HTML表格\nvar table = \"<table><thead><tr><th style='padding: 4px 90px;'>PM2_5</th><th style='padding: 4px 90px;'>Time</th></tr></thead><tbody>\";\nfor (var i = 0; i < data.length; i++) {\n    table += \"<tr><td style='padding: 4px 90px;'>\" + data[i].pm2_5 + \"</td><td style='padding: 4px 90px;'>\" + data[i].datetime + \"</td></tr>\";\n}\ntable += \"</tbody></table>\";\n// 把HTML表格放在一个固定高度和宽度的DIV容器中\nmsg.payload = \"<div class='scroll-table' style='height: 150px; width: 80%;'>\" + table + \"</div>\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 760,
        "wires": [
            [
                "48181f5eb0ed0eee"
            ]
        ]
    },
    {
        "id": "48181f5eb0ed0eee",
        "type": "ui_template",
        "z": "842a49df1ddff959",
        "group": "7bd63622b6be217a",
        "name": "PM2.5",
        "order": 56,
        "width": 0,
        "height": 0,
        "format": "<div ng-bind-html=\"msg.payload | trusted\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1910,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "b952cfc00198f5cd",
        "type": "ui_text",
        "z": "842a49df1ddff959",
        "group": "7bd63622b6be217a",
        "order": 44,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "Alarm",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 2050,
        "y": 700,
        "wires": []
    },
    {
        "id": "d3c4c8dd4e84dbb2",
        "type": "ui_text",
        "z": "842a49df1ddff959",
        "group": "7bd63622b6be217a",
        "order": 51,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "PM2.5",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 2050,
        "y": 760,
        "wires": []
    },
    {
        "id": "e610cf38869608e6",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 55",
        "func": "var date = new Date(msg.payload);\nvar startDate = date.toISOString().substring(0, 10) + ' 00:00:00';\nvar endDate = date.toISOString().substring(0, 10) + ' 23:59:59';\n\nmsg.topic = \"SELECT aq, DATE_FORMAT(time, '%Y-%m-%d %H:%i:%s') as datetime FROM air.air_quality WHERE time BETWEEN '\" + startDate + \"' AND '\" + endDate + \"' ORDER BY time ASC\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 820,
        "wires": [
            [
                "56375e95854f58ba"
            ]
        ]
    },
    {
        "id": "56375e95854f58ba",
        "type": "mysql",
        "z": "842a49df1ddff959",
        "mydb": "cf85ad42ef49f2d3",
        "name": "",
        "x": 1530,
        "y": 820,
        "wires": [
            [
                "4a5b7145b93ed63a"
            ]
        ]
    },
    {
        "id": "ec69a4d91e5488d2",
        "type": "ui_date_picker",
        "z": "842a49df1ddff959",
        "name": "",
        "label": "Air Quality",
        "group": "7bd63622b6be217a",
        "order": 61,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 1170,
        "y": 820,
        "wires": [
            [
                "e610cf38869608e6"
            ]
        ]
    },
    {
        "id": "4a5b7145b93ed63a",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 56",
        "func": "// 选出需要的数据并排序\nvar data = msg.payload.map(function (item) {\n    return {\n        aq: item.aq,\n        datetime: item.datetime\n    }\n}).sort(function (a, b) {\n    // @ts-ignore\n    return new Date(a.datetime) - new Date(b.datetime);\n});\n\n// 生成HTML表格\nvar table = \"<table><thead><tr><th style='padding: 4px 80px;'>Air_quality</th><th style='padding: 4px 80px;'>Time</th></tr></thead><tbody>\";\nfor (var i = 0; i < data.length; i++) {\n    table += \"<tr><td style='padding: 4px 80px;'>\" + data[i].aq + \"</td><td style='padding: 4px 80px;'>\" + data[i].datetime + \"</td></tr>\";\n}\ntable += \"</tbody></table>\";\n// 把HTML表格放在一个固定高度和宽度的DIV容器中\nmsg.payload = \"<div class='scroll-table' style='height: 150px; width: 80%;'>\" + table + \"</div>\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 820,
        "wires": [
            [
                "38ae4c44cf055555"
            ]
        ]
    },
    {
        "id": "38ae4c44cf055555",
        "type": "ui_template",
        "z": "842a49df1ddff959",
        "group": "7bd63622b6be217a",
        "name": "Air Quality",
        "order": 63,
        "width": 0,
        "height": 0,
        "format": "<div ng-bind-html=\"msg.payload | trusted\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1930,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "44be18662153b320",
        "type": "ui_text",
        "z": "842a49df1ddff959",
        "group": "7bd63622b6be217a",
        "order": 58,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "Air Quality",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 2110,
        "y": 820,
        "wires": []
    },
    {
        "id": "aea466a78ddd07bd",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 57",
        "func": "var date = new Date(msg.payload);\nvar startDate = date.toISOString().substring(0, 10) + ' 00:00:00';\nvar endDate = date.toISOString().substring(0, 10) + ' 23:59:59';\n\nmsg.topic = \"SELECT gas, DATE_FORMAT(time, '%Y-%m-%d %H:%i:%s') as datetime FROM air.combustible_gases WHERE time BETWEEN '\" + startDate + \"' AND '\" + endDate + \"' ORDER BY time ASC\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 880,
        "wires": [
            [
                "3e2e79edf295eca2"
            ]
        ]
    },
    {
        "id": "3e2e79edf295eca2",
        "type": "mysql",
        "z": "842a49df1ddff959",
        "mydb": "cf85ad42ef49f2d3",
        "name": "",
        "x": 1530,
        "y": 880,
        "wires": [
            [
                "f62d1a14d4394c45"
            ]
        ]
    },
    {
        "id": "f32b928349fdb738",
        "type": "ui_date_picker",
        "z": "842a49df1ddff959",
        "name": "",
        "label": "Combustible gases",
        "group": "7bd63622b6be217a",
        "order": 68,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 1150,
        "y": 880,
        "wires": [
            [
                "aea466a78ddd07bd"
            ]
        ]
    },
    {
        "id": "f62d1a14d4394c45",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 58",
        "func": "// 选出需要的数据并排序\nvar data = msg.payload.map(function (item) {\n    return {\n        gas: item.gas,\n        datetime: item.datetime\n    }\n}).sort(function (a, b) {\n    // @ts-ignore\n    return new Date(a.datetime) - new Date(b.datetime);\n});\n\n// 生成HTML表格\nvar table = \"<table><thead><tr><th style='padding: 4px 60px;'>Combustible_gases</th><th style='padding: 4px 60px;'>Time</th></tr></thead><tbody>\";\nfor (var i = 0; i < data.length; i++) {\n    table += \"<tr><td style='padding: 4px 60px;'>\" + data[i].gas + \"</td><td style='padding: 4px 60px;'>\" + data[i].datetime + \"</td></tr>\";\n}\ntable += \"</tbody></table>\";\n// 把HTML表格放在一个固定高度和宽度的DIV容器中\nmsg.payload = \"<div class='scroll-table' style='height: 150px; width: 80%;'>\" + table + \"</div>\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 880,
        "wires": [
            [
                "ade664f231b60360"
            ]
        ]
    },
    {
        "id": "ade664f231b60360",
        "type": "ui_template",
        "z": "842a49df1ddff959",
        "group": "7bd63622b6be217a",
        "name": "Combustible gases",
        "order": 70,
        "width": 0,
        "height": 0,
        "format": "<div ng-bind-html=\"msg.payload | trusted\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1950,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "19422519e51b3d56",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 59",
        "func": "var date = new Date(msg.payload);\nvar startDate = date.toISOString().substring(0, 10) + ' 00:00:00';\nvar endDate = date.toISOString().substring(0, 10) + ' 23:59:59';\n\nmsg.topic = \"SELECT smoke, DATE_FORMAT(time, '%Y-%m-%d %H:%i:%s') as datetime FROM air.smoke WHERE time BETWEEN '\" + startDate + \"' AND '\" + endDate + \"' ORDER BY time ASC\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 940,
        "wires": [
            [
                "8e434208117cebd5"
            ]
        ]
    },
    {
        "id": "8e434208117cebd5",
        "type": "mysql",
        "z": "842a49df1ddff959",
        "mydb": "cf85ad42ef49f2d3",
        "name": "",
        "x": 1530,
        "y": 940,
        "wires": [
            [
                "2e104f6b309fd337"
            ]
        ]
    },
    {
        "id": "8e67e5b95b5ff7df",
        "type": "ui_date_picker",
        "z": "842a49df1ddff959",
        "name": "",
        "label": "Smoke",
        "group": "7bd63622b6be217a",
        "order": 75,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 1180,
        "y": 940,
        "wires": [
            [
                "19422519e51b3d56"
            ]
        ]
    },
    {
        "id": "2e104f6b309fd337",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 60",
        "func": "// 选出需要的数据并排序\nvar data = msg.payload.map(function (item) {\n    return {\n        smoke: item.smoke,\n        datetime: item.datetime\n    }\n}).sort(function (a, b) {\n    // @ts-ignore\n    return new Date(a.datetime) - new Date(b.datetime);\n});\n\n// 生成HTML表格\nvar table = \"<table><thead><tr><th style='padding: 4px 90px;'>Smoke</th><th style='padding: 4px 90px;'>Time</th></tr></thead><tbody>\";\nfor (var i = 0; i < data.length; i++) {\n    table += \"<tr><td style='padding: 4px 90px;'>\" + data[i].smoke + \"</td><td style='padding: 4px 90px;'>\" + data[i].datetime + \"</td></tr>\";\n}\ntable += \"</tbody></table>\";\n// 把HTML表格放在一个固定高度和宽度的DIV容器中\nmsg.payload = \"<div class='scroll-table' style='height: 150px; width: 80%;'>\" + table + \"</div>\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 940,
        "wires": [
            [
                "7e6fc45e49b1f47a"
            ]
        ]
    },
    {
        "id": "7e6fc45e49b1f47a",
        "type": "ui_template",
        "z": "842a49df1ddff959",
        "group": "7bd63622b6be217a",
        "name": "Smoke",
        "order": 77,
        "width": 0,
        "height": 0,
        "format": "<div ng-bind-html=\"msg.payload | trusted\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1920,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "6f0ee5e914c4d2d3",
        "type": "ui_text",
        "z": "842a49df1ddff959",
        "group": "7bd63622b6be217a",
        "order": 65,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "Combustible gases",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 2170,
        "y": 880,
        "wires": []
    },
    {
        "id": "b6abeebe5c030015",
        "type": "ui_text",
        "z": "842a49df1ddff959",
        "group": "7bd63622b6be217a",
        "order": 72,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "Smoke",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 2080,
        "y": 940,
        "wires": []
    },
    {
        "id": "e2bc526859e739da",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 61",
        "func": "var date = new Date(msg.payload);\nvar startDate = date.toISOString().substring(0, 10) + ' 00:00:00';\nvar endDate = date.toISOString().substring(0, 10) + ' 23:59:59';\n\nmsg.topic = \"SELECT co, DATE_FORMAT(time, '%Y-%m-%d %H:%i:%s') as datetime FROM air.carbon_monoxide WHERE time BETWEEN '\" + startDate + \"' AND '\" + endDate + \"' ORDER BY time ASC\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 1000,
        "wires": [
            [
                "7057c7ba0155bd6a"
            ]
        ]
    },
    {
        "id": "7057c7ba0155bd6a",
        "type": "mysql",
        "z": "842a49df1ddff959",
        "mydb": "cf85ad42ef49f2d3",
        "name": "",
        "x": 1530,
        "y": 1000,
        "wires": [
            [
                "2ad3e87239801321"
            ]
        ]
    },
    {
        "id": "2fee54f938eebd42",
        "type": "ui_date_picker",
        "z": "842a49df1ddff959",
        "name": "",
        "label": "Carbon monoxide",
        "group": "7bd63622b6be217a",
        "order": 82,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 1150,
        "y": 1000,
        "wires": [
            [
                "e2bc526859e739da"
            ]
        ]
    },
    {
        "id": "2ad3e87239801321",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 62",
        "func": "// 选出需要的数据并排序\nvar data = msg.payload.map(function (item) {\n    return {\n        co: item.co,\n        datetime: item.datetime\n    }\n}).sort(function (a, b) {\n    // @ts-ignore\n    return new Date(a.datetime) - new Date(b.datetime);\n});\n\n// 生成HTML表格\nvar table = \"<table><thead><tr><th style='padding: 4px 60px;'>Carbon_monoxide</th><th style='padding: 4px 60px;'>Time</th></tr></thead><tbody>\";\nfor (var i = 0; i < data.length; i++) {\n    table += \"<tr><td style='padding: 4px 60px;'>\" + data[i].co + \"</td><td style='padding: 4px 60px;'>\" + data[i].datetime + \"</td></tr>\";\n}\ntable += \"</tbody></table>\";\n// 把HTML表格放在一个固定高度和宽度的DIV容器中\nmsg.payload = \"<div class='scroll-table' style='height: 150px; width: 80%;'>\" + table + \"</div>\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 1000,
        "wires": [
            [
                "460f44021c0f1c8b"
            ]
        ]
    },
    {
        "id": "460f44021c0f1c8b",
        "type": "ui_template",
        "z": "842a49df1ddff959",
        "group": "7bd63622b6be217a",
        "name": "Carbon monoxide",
        "order": 84,
        "width": 0,
        "height": 0,
        "format": "<div ng-bind-html=\"msg.payload | trusted\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1950,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "6bf83f7f59851c00",
        "type": "ui_text",
        "z": "842a49df1ddff959",
        "group": "7bd63622b6be217a",
        "order": 79,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "Carbon monoxide",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 2170,
        "y": 1000,
        "wires": []
    },
    {
        "id": "328b3b421d5f31d6",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 63",
        "func": "var date = new Date(msg.payload);\nvar startDate = date.toISOString().substring(0, 10) + ' 00:00:00';\nvar endDate = date.toISOString().substring(0, 10) + ' 23:59:59';\n\nmsg.topic = \"SELECT bmp, DATE_FORMAT(time, '%Y-%m-%d %H:%i:%s') as datetime FROM air.atmospheric_pressure WHERE time BETWEEN '\" + startDate + \"' AND '\" + endDate + \"' ORDER BY time ASC\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 1060,
        "wires": [
            [
                "181c66ba934f1b1c"
            ]
        ]
    },
    {
        "id": "181c66ba934f1b1c",
        "type": "mysql",
        "z": "842a49df1ddff959",
        "mydb": "cf85ad42ef49f2d3",
        "name": "",
        "x": 1530,
        "y": 1060,
        "wires": [
            [
                "2e307fe7d6798f65"
            ]
        ]
    },
    {
        "id": "845dffa79e70b486",
        "type": "ui_date_picker",
        "z": "842a49df1ddff959",
        "name": "",
        "label": "Atmospheric pressure",
        "group": "7bd63622b6be217a",
        "order": 89,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 1140,
        "y": 1060,
        "wires": [
            [
                "328b3b421d5f31d6"
            ]
        ]
    },
    {
        "id": "2e307fe7d6798f65",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 64",
        "func": "// 选出需要的数据并排序\nvar data = msg.payload.map(function (item) {\n    return {\n        bmp: item.bmp,\n        datetime: item.datetime\n    }\n}).sort(function (a, b) {\n    // @ts-ignore\n    return new Date(a.datetime) - new Date(b.datetime);\n});\n\n// 生成HTML表格\nvar table = \"<table><thead><tr><th style='padding: 4px 60px;'>Atmospheric_pressure</th><th style='padding: 4px 60px;'>Time</th></tr></thead><tbody>\";\nfor (var i = 0; i < data.length; i++) {\n    table += \"<tr><td style='padding: 4px 60px;'>\" + data[i].bmp + \"</td><td style='padding: 4px 60px;'>\" + data[i].datetime + \"</td></tr>\";\n}\ntable += \"</tbody></table>\";\n// 把HTML表格放在一个固定高度和宽度的DIV容器中\nmsg.payload = \"<div class='scroll-table' style='height: 150px; width: 80%;'>\" + table + \"</div>\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 1060,
        "wires": [
            [
                "d1667ce026a2c0aa"
            ]
        ]
    },
    {
        "id": "d1667ce026a2c0aa",
        "type": "ui_template",
        "z": "842a49df1ddff959",
        "group": "7bd63622b6be217a",
        "name": "Atmospheric pressure",
        "order": 91,
        "width": 0,
        "height": 0,
        "format": "<div ng-bind-html=\"msg.payload | trusted\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1960,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "92bb67b918581aa5",
        "type": "ui_text",
        "z": "842a49df1ddff959",
        "group": "7bd63622b6be217a",
        "order": 86,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "Atmospheric pressure",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 2200,
        "y": 1060,
        "wires": []
    },
    {
        "id": "c6d59302f2177838",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 65",
        "func": "var date = new Date(msg.payload);\nvar startDate = date.toISOString().substring(0, 10) + ' 00:00:00';\nvar endDate = date.toISOString().substring(0, 10) + ' 23:59:59';\n\nmsg.topic = \"SELECT high, DATE_FORMAT(time, '%Y-%m-%d %H:%i:%s') as datetime FROM air.relative_height WHERE time BETWEEN '\" + startDate + \"' AND '\" + endDate + \"' ORDER BY time ASC\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 1120,
        "wires": [
            [
                "567c617e8bf30c89"
            ]
        ]
    },
    {
        "id": "567c617e8bf30c89",
        "type": "mysql",
        "z": "842a49df1ddff959",
        "mydb": "cf85ad42ef49f2d3",
        "name": "",
        "x": 1530,
        "y": 1120,
        "wires": [
            [
                "d732f3dd115c2f57"
            ]
        ]
    },
    {
        "id": "df04cb7bf6b76f1f",
        "type": "ui_date_picker",
        "z": "842a49df1ddff959",
        "name": "",
        "label": "Relative height",
        "group": "7bd63622b6be217a",
        "order": 96,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 1160,
        "y": 1120,
        "wires": [
            [
                "c6d59302f2177838"
            ]
        ]
    },
    {
        "id": "d732f3dd115c2f57",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 66",
        "func": "// 选出需要的数据并排序\nvar data = msg.payload.map(function (item) {\n    return {\n        high: item.high,\n        datetime: item.datetime\n    }\n}).sort(function (a, b) {\n    // @ts-ignore\n    return new Date(a.datetime) - new Date(b.datetime);\n});\n\n// 生成HTML表格\nvar table = \"<table><thead><tr><th style='padding: 4px 75px;'>Relative_height</th><th style='padding: 4px 75px;'>Time</th></tr></thead><tbody>\";\nfor (var i = 0; i < data.length; i++) {\n    table += \"<tr><td style='padding: 4px 75px;'>\" + data[i].high + \"</td><td style='padding: 4px 75px;'>\" + data[i].datetime + \"</td></tr>\";\n}\ntable += \"</tbody></table>\";\n// 把HTML表格放在一个固定高度和宽度的DIV容器中\nmsg.payload = \"<div class='scroll-table' style='height: 150px; width: 80%;'>\" + table + \"</div>\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 1120,
        "wires": [
            [
                "6b5a1b266a30f0db"
            ]
        ]
    },
    {
        "id": "6b5a1b266a30f0db",
        "type": "ui_template",
        "z": "842a49df1ddff959",
        "group": "7bd63622b6be217a",
        "name": "Relative height",
        "order": 98,
        "width": 0,
        "height": 0,
        "format": "<div ng-bind-html=\"msg.payload | trusted\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1940,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "2e9e51948b512e15",
        "type": "ui_text",
        "z": "842a49df1ddff959",
        "group": "7bd63622b6be217a",
        "order": 93,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "Relative height",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 2140,
        "y": 1120,
        "wires": []
    },
    {
        "id": "bfd916bebdb16f4b",
        "type": "e-mail",
        "z": "842a49df1ddff959",
        "server": "smtp.qq.com",
        "port": "465",
        "secure": true,
        "tls": true,
        "name": "ming12967@gmail.com",
        "dname": "",
        "x": 1410,
        "y": 120,
        "wires": []
    },
    {
        "id": "66e9289e7f676b9a",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 67",
        "func": "// Extract the value of Alarm variable from the payload using regular expression\nvar alarmValue = msg.payload.match(/Alarm:(\\d+)/);\n\n// Check if the alarm value exists and is equal to 1\nif (alarmValue && alarmValue[1] === '1') {\n    // Construct a new message with \"weather not good\" added to the end\n    var newPayload = msg.payload.replace(/Alarm:\\d+/, 'Alarm:1,weather not good');\n    msg.payload = newPayload;\n\n    // Set the email subject\n    msg.topic = 'Test';\n\n    // Set the node status to indicate that an email is being sent\n    node.status({ fill: \"green\", shape: \"dot\", text: \"Sending email\" });\n\n    // Return the modified message to send an email\n    return msg;\n} else {\n    // Clear the node status and return null to indicate that no email is being sent\n    node.status({});\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 2140,
        "wires": [
            [
                "d0ed33d8a7e1a60f"
            ]
        ]
    },
    {
        "id": "5b388273293774ab",
        "type": "inject",
        "z": "842a49df1ddff959",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Hum:50,Tem:50,Light:30,AC_H:0,AC_C:0,Humidifier:2,Alarm:1",
        "payloadType": "str",
        "x": 350,
        "y": 2140,
        "wires": [
            [
                "66e9289e7f676b9a"
            ]
        ]
    },
    {
        "id": "d0ed33d8a7e1a60f",
        "type": "debug",
        "z": "842a49df1ddff959",
        "name": "debug 26",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 2140,
        "wires": []
    },
    {
        "id": "80060f8163d86963",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 68",
        "func": "// Extract the value of Alarm variable from the payload using regular expression\nvar alarmValue = msg.payload.match(/\"Alarm\":(\\d+)/);\n\n// Get the current timestamp in seconds\nvar currentTime = Math.floor(Date.now() / 1000);\n\n// Check if the alarm value exists and is equal to 1\nif (alarmValue && alarmValue[1] === '1') {\n    // Check if the cooldown period has passed or if this is the first time sending the email\n    if (!flow.get('lastEmailTime') || currentTime - flow.get('lastEmailTime') >= 60) {\n        // Construct a new message with \"weather not good\" added to the end\n        var newPayload = msg.payload.replace(/\"Alarm\":\\d+/, '\"Alarm\":1,weather not good');\n        msg.payload = newPayload;\n\n        // Set the email subject\n        msg.topic = 'Test';\n\n        // Set the node status to indicate that an email is being sent\n        node.status({ fill: \"green\", shape: \"dot\", text: \"Sending email\" });\n\n        // Update the last email time to the current time\n        flow.set('lastEmailTime', currentTime);\n\n        // Return the modified message to send an email\n        return msg;\n    } else {\n        // Clear the node status and return null to indicate that no email is being sent\n        node.status({});\n        return null;\n    }\n} else {\n    // Clear the node status and reset the last email time if Alarm value is 0\n    node.status({});\n    flow.set('lastEmailTime', null);\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 120,
        "wires": [
            [
                "f668330a3f28722d",
                "bfd916bebdb16f4b"
            ]
        ]
    },
    {
        "id": "f668330a3f28722d",
        "type": "debug",
        "z": "842a49df1ddff959",
        "name": "debug 27",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 180,
        "wires": []
    },
    {
        "id": "4f1ad3d98740266e",
        "type": "e-mail",
        "z": "842a49df1ddff959",
        "server": "smtp.qq.com",
        "port": "465",
        "secure": true,
        "tls": true,
        "name": "ming12967@gmail.com",
        "dname": "",
        "x": 1590,
        "y": 1180,
        "wires": []
    },
    {
        "id": "380085ca1b5df7f6",
        "type": "function",
        "z": "842a49df1ddff959",
        "name": "function 69",
        "func": "// Extract the value of Alarm variable from the payload using regular expression\nvar alarmValue = msg.payload.match(/Alarm:(\\d+)/);\n\n// Get the current timestamp in seconds\nvar currentTime = Math.floor(Date.now() / 1000);\n\n// Check if the alarm value exists and is equal to 1\nif (alarmValue && alarmValue[1] === '1') {\n    // Check if the cooldown period has passed or if this is the first time sending the email\n    if (!flow.get('lastEmailTime') || currentTime - flow.get('lastEmailTime') >= 60) {\n        // Construct a new message with \"weather not good\" added to the end\n        var newPayload = msg.payload.replace(/Alarm:\\d+/, 'Alarm:1,weather not good');\n        msg.payload = newPayload;\n\n        // Set the email subject\n        msg.topic = 'Test';\n\n        // Set the node status to indicate that an email is being sent\n        node.status({ fill: \"green\", shape: \"dot\", text: \"Sending email\" });\n\n        // Update the last email time to the current time\n        flow.set('lastEmailTime', currentTime);\n\n        // Return the modified message to send an email\n        return msg;\n    } else {\n        // Clear the node status and return null to indicate that no email is being sent\n        node.status({});\n        return null;\n    }\n} else {\n    // Clear the node status and reset the last email time if Alarm value is 0\n    node.status({});\n    flow.set('lastEmailTime', null);\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 1180,
        "wires": [
            [
                "c95d3d1247541fcb",
                "4f1ad3d98740266e"
            ]
        ]
    },
    {
        "id": "c95d3d1247541fcb",
        "type": "debug",
        "z": "842a49df1ddff959",
        "name": "debug 28",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1540,
        "y": 1240,
        "wires": []
    },
    {
        "id": "7e88f4e87f45799e",
        "type": "inject",
        "z": "842a49df1ddff959",
        "name": "test3",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Hum:50,Tem:50,Light:30,AC_H:0,AC_C:0,Humidifier:2,Alarm:1",
        "payloadType": "str",
        "x": 1190,
        "y": 1180,
        "wires": [
            [
                "380085ca1b5df7f6"
            ]
        ]
    },
    {
        "id": "614433f0e3e15dd1",
        "type": "inject",
        "z": "842a49df1ddff959",
        "name": "test1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Hum\":38,\"Tem\":27,\"Light\":40.9,\"AC_H\":1,\"AC_C\":0,\"Humidifier\":0,\"Device\":0,\"PM25\":485,\"AQ\":1311,\"Gas\":955,\"smoke\":216,\"CO\":255,\"BMP\":985.78,\"High\":261.62,\"Alarm\":1}",
        "payloadType": "str",
        "x": 130,
        "y": 420,
        "wires": [
            [
                "9cbdca5a7308a56b",
                "d9da4b53e0d0bcd4",
                "191e14742ceeb066",
                "041f8582b3b0eddb",
                "8a6c379b4308501b",
                "e28f06faa6f5c43f",
                "fc4e38b6afbc75dc",
                "8f3354fd23bf0bbf",
                "b0d0dadd83563452",
                "7f101ab344e2c934",
                "610fa559aa72912c",
                "955d968cad882b64",
                "dea9476e030b0b84",
                "7b55d1c892825c0a",
                "703392b350d44c5f"
            ]
        ]
    },
    {
        "id": "dfe7f9fde1d2d042",
        "type": "inject",
        "z": "842a49df1ddff959",
        "name": "test2",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Hum\":38,\"Tem\":27,\"Light\":40.9,\"AC_H\":1,\"AC_C\":0,\"Humidifier\":0,\"Device\":0,\"PM25\":485,\"AQ\":1311,\"Gas\":955,\"smoke\":216,\"CO\":255,\"BMP\":985.78,\"High\":261.62,\"Alarm\":1,}",
        "payloadType": "str",
        "x": 130,
        "y": 320,
        "wires": [
            [
                "80060f8163d86963"
            ]
        ]
    }
]